// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package laforge_proto_agent

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// LaforgeClient is the client API for Laforge service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LaforgeClient interface {
	GetHeartBeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatReply, error)
	GetTask(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*TaskReply, error)
	InformTaskStatus(ctx context.Context, in *TaskStatusRequest, opts ...grpc.CallOption) (*TaskStatusReply, error)
}

type laforgeClient struct {
	cc grpc.ClientConnInterface
}

func NewLaforgeClient(cc grpc.ClientConnInterface) LaforgeClient {
	return &laforgeClient{cc}
}

func (c *laforgeClient) GetHeartBeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatReply, error) {
	out := new(HeartbeatReply)
	err := c.cc.Invoke(ctx, "/laforge_proto_agent.laforge/GetHeartBeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *laforgeClient) GetTask(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*TaskReply, error) {
	out := new(TaskReply)
	err := c.cc.Invoke(ctx, "/laforge_proto_agent.laforge/GetTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *laforgeClient) InformTaskStatus(ctx context.Context, in *TaskStatusRequest, opts ...grpc.CallOption) (*TaskStatusReply, error) {
	out := new(TaskStatusReply)
	err := c.cc.Invoke(ctx, "/laforge_proto_agent.laforge/InformTaskStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LaforgeServer is the server API for Laforge service.
// All implementations must embed UnimplementedLaforgeServer
// for forward compatibility
type LaforgeServer interface {
	GetHeartBeat(context.Context, *HeartbeatRequest) (*HeartbeatReply, error)
	GetTask(context.Context, *TaskRequest) (*TaskReply, error)
	InformTaskStatus(context.Context, *TaskStatusRequest) (*TaskStatusReply, error)
	mustEmbedUnimplementedLaforgeServer()
}

// UnimplementedLaforgeServer must be embedded to have forward compatible implementations.
type UnimplementedLaforgeServer struct {
}

func (UnimplementedLaforgeServer) GetHeartBeat(context.Context, *HeartbeatRequest) (*HeartbeatReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHeartBeat not implemented")
}
func (UnimplementedLaforgeServer) GetTask(context.Context, *TaskRequest) (*TaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedLaforgeServer) InformTaskStatus(context.Context, *TaskStatusRequest) (*TaskStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InformTaskStatus not implemented")
}
func (UnimplementedLaforgeServer) mustEmbedUnimplementedLaforgeServer() {}

// UnsafeLaforgeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LaforgeServer will
// result in compilation errors.
type UnsafeLaforgeServer interface {
	mustEmbedUnimplementedLaforgeServer()
}

func RegisterLaforgeServer(s grpc.ServiceRegistrar, srv LaforgeServer) {
	s.RegisterService(&_Laforge_serviceDesc, srv)
}

func _Laforge_GetHeartBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaforgeServer).GetHeartBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/laforge_proto_agent.laforge/GetHeartBeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaforgeServer).GetHeartBeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Laforge_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaforgeServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/laforge_proto_agent.laforge/GetTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaforgeServer).GetTask(ctx, req.(*TaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Laforge_InformTaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaforgeServer).InformTaskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/laforge_proto_agent.laforge/InformTaskStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaforgeServer).InformTaskStatus(ctx, req.(*TaskStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Laforge_serviceDesc = grpc.ServiceDesc{
	ServiceName: "laforge_proto_agent.laforge",
	HandlerType: (*LaforgeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHeartBeat",
			Handler:    _Laforge_GetHeartBeat_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _Laforge_GetTask_Handler,
		},
		{
			MethodName: "InformTaskStatus",
			Handler:    _Laforge_InformTaskStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "laforge_proto_agent/laforge_proto_agent.proto",
}
