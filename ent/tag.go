// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
	"github.com/gen0cide/laforge/ent/tag"
	"github.com/google/uuid"
)

// Tag is the model entity for the Tag schema.
type Tag struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID uuid.UUID `json:"uuid,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description          map[string]string `json:"description,omitempty"`
	build_tag            *int
	command_tag          *int
	dns_record_tag       *int
	disk_tag             *int
	environment_tag      *int
	file_delete_tag      *int
	file_download_tag    *int
	file_extract_tag     *int
	finding_tag          *int
	host_tag             *int
	included_network_tag *int
	network_tag          *int
	remote_file_tag      *int
	script_tag           *int
	status_tag           *int
	team_tag             *int
	user_tag             *int
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Tag) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&uuid.UUID{},      // uuid
		&sql.NullString{}, // name
		&[]byte{},         // description
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Tag) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // build_tag
		&sql.NullInt64{}, // command_tag
		&sql.NullInt64{}, // dns_record_tag
		&sql.NullInt64{}, // disk_tag
		&sql.NullInt64{}, // environment_tag
		&sql.NullInt64{}, // file_delete_tag
		&sql.NullInt64{}, // file_download_tag
		&sql.NullInt64{}, // file_extract_tag
		&sql.NullInt64{}, // finding_tag
		&sql.NullInt64{}, // host_tag
		&sql.NullInt64{}, // included_network_tag
		&sql.NullInt64{}, // network_tag
		&sql.NullInt64{}, // remote_file_tag
		&sql.NullInt64{}, // script_tag
		&sql.NullInt64{}, // status_tag
		&sql.NullInt64{}, // team_tag
		&sql.NullInt64{}, // user_tag
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Tag fields.
func (t *Tag) assignValues(values ...interface{}) error {
	if m, n := len(values), len(tag.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	t.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*uuid.UUID); !ok {
		return fmt.Errorf("unexpected type %T for field uuid", values[0])
	} else if value != nil {
		t.UUID = *value
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[1])
	} else if value.Valid {
		t.Name = value.String
	}

	if value, ok := values[2].(*[]byte); !ok {
		return fmt.Errorf("unexpected type %T for field description", values[2])
	} else if value != nil && len(*value) > 0 {
		if err := json.Unmarshal(*value, &t.Description); err != nil {
			return fmt.Errorf("unmarshal field description: %v", err)
		}
	}
	values = values[3:]
	if len(values) == len(tag.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field build_tag", value)
		} else if value.Valid {
			t.build_tag = new(int)
			*t.build_tag = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field command_tag", value)
		} else if value.Valid {
			t.command_tag = new(int)
			*t.command_tag = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field dns_record_tag", value)
		} else if value.Valid {
			t.dns_record_tag = new(int)
			*t.dns_record_tag = int(value.Int64)
		}
		if value, ok := values[3].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field disk_tag", value)
		} else if value.Valid {
			t.disk_tag = new(int)
			*t.disk_tag = int(value.Int64)
		}
		if value, ok := values[4].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field environment_tag", value)
		} else if value.Valid {
			t.environment_tag = new(int)
			*t.environment_tag = int(value.Int64)
		}
		if value, ok := values[5].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field file_delete_tag", value)
		} else if value.Valid {
			t.file_delete_tag = new(int)
			*t.file_delete_tag = int(value.Int64)
		}
		if value, ok := values[6].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field file_download_tag", value)
		} else if value.Valid {
			t.file_download_tag = new(int)
			*t.file_download_tag = int(value.Int64)
		}
		if value, ok := values[7].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field file_extract_tag", value)
		} else if value.Valid {
			t.file_extract_tag = new(int)
			*t.file_extract_tag = int(value.Int64)
		}
		if value, ok := values[8].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field finding_tag", value)
		} else if value.Valid {
			t.finding_tag = new(int)
			*t.finding_tag = int(value.Int64)
		}
		if value, ok := values[9].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field host_tag", value)
		} else if value.Valid {
			t.host_tag = new(int)
			*t.host_tag = int(value.Int64)
		}
		if value, ok := values[10].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field included_network_tag", value)
		} else if value.Valid {
			t.included_network_tag = new(int)
			*t.included_network_tag = int(value.Int64)
		}
		if value, ok := values[11].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field network_tag", value)
		} else if value.Valid {
			t.network_tag = new(int)
			*t.network_tag = int(value.Int64)
		}
		if value, ok := values[12].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field remote_file_tag", value)
		} else if value.Valid {
			t.remote_file_tag = new(int)
			*t.remote_file_tag = int(value.Int64)
		}
		if value, ok := values[13].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field script_tag", value)
		} else if value.Valid {
			t.script_tag = new(int)
			*t.script_tag = int(value.Int64)
		}
		if value, ok := values[14].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field status_tag", value)
		} else if value.Valid {
			t.status_tag = new(int)
			*t.status_tag = int(value.Int64)
		}
		if value, ok := values[15].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field team_tag", value)
		} else if value.Valid {
			t.team_tag = new(int)
			*t.team_tag = int(value.Int64)
		}
		if value, ok := values[16].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field user_tag", value)
		} else if value.Valid {
			t.user_tag = new(int)
			*t.user_tag = int(value.Int64)
		}
	}
	return nil
}

// Update returns a builder for updating this Tag.
// Note that, you need to call Tag.Unwrap() before calling this method, if this Tag
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Tag) Update() *TagUpdateOne {
	return (&TagClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (t *Tag) Unwrap() *Tag {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Tag is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Tag) String() string {
	var builder strings.Builder
	builder.WriteString("Tag(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(fmt.Sprintf("%v", t.UUID))
	builder.WriteString(", name=")
	builder.WriteString(t.Name)
	builder.WriteString(", description=")
	builder.WriteString(fmt.Sprintf("%v", t.Description))
	builder.WriteByte(')')
	return builder.String()
}

// Tags is a parsable slice of Tag.
type Tags []*Tag

func (t Tags) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
