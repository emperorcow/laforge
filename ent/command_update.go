// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/gen0cide/laforge/ent/command"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/gen0cide/laforge/ent/tag"
	"github.com/gen0cide/laforge/ent/user"
)

// CommandUpdate is the builder for updating Command entities.
type CommandUpdate struct {
	config
	hooks    []Hook
	mutation *CommandMutation
}

// Where adds a new predicate for the builder.
func (cu *CommandUpdate) Where(ps ...predicate.Command) *CommandUpdate {
	cu.mutation.predicates = append(cu.mutation.predicates, ps...)
	return cu
}

// SetName sets the name field.
func (cu *CommandUpdate) SetName(s string) *CommandUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetDescription sets the description field.
func (cu *CommandUpdate) SetDescription(s string) *CommandUpdate {
	cu.mutation.SetDescription(s)
	return cu
}

// SetProgram sets the program field.
func (cu *CommandUpdate) SetProgram(s string) *CommandUpdate {
	cu.mutation.SetProgram(s)
	return cu
}

// SetArgs sets the args field.
func (cu *CommandUpdate) SetArgs(s []string) *CommandUpdate {
	cu.mutation.SetArgs(s)
	return cu
}

// SetIgnoreErrors sets the ignore_errors field.
func (cu *CommandUpdate) SetIgnoreErrors(b bool) *CommandUpdate {
	cu.mutation.SetIgnoreErrors(b)
	return cu
}

// SetDisabled sets the disabled field.
func (cu *CommandUpdate) SetDisabled(b bool) *CommandUpdate {
	cu.mutation.SetDisabled(b)
	return cu
}

// SetCooldown sets the cooldown field.
func (cu *CommandUpdate) SetCooldown(i int) *CommandUpdate {
	cu.mutation.ResetCooldown()
	cu.mutation.SetCooldown(i)
	return cu
}

// AddCooldown adds i to cooldown.
func (cu *CommandUpdate) AddCooldown(i int) *CommandUpdate {
	cu.mutation.AddCooldown(i)
	return cu
}

// SetTimeout sets the timeout field.
func (cu *CommandUpdate) SetTimeout(i int) *CommandUpdate {
	cu.mutation.ResetTimeout()
	cu.mutation.SetTimeout(i)
	return cu
}

// AddTimeout adds i to timeout.
func (cu *CommandUpdate) AddTimeout(i int) *CommandUpdate {
	cu.mutation.AddTimeout(i)
	return cu
}

// SetVars sets the vars field.
func (cu *CommandUpdate) SetVars(m map[string]string) *CommandUpdate {
	cu.mutation.SetVars(m)
	return cu
}

// AddUserIDs adds the user edge to User by ids.
func (cu *CommandUpdate) AddUserIDs(ids ...int) *CommandUpdate {
	cu.mutation.AddUserIDs(ids...)
	return cu
}

// AddUser adds the user edges to User.
func (cu *CommandUpdate) AddUser(u ...*User) *CommandUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cu.AddUserIDs(ids...)
}

// AddTagIDs adds the tag edge to Tag by ids.
func (cu *CommandUpdate) AddTagIDs(ids ...int) *CommandUpdate {
	cu.mutation.AddTagIDs(ids...)
	return cu
}

// AddTag adds the tag edges to Tag.
func (cu *CommandUpdate) AddTag(t ...*Tag) *CommandUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cu.AddTagIDs(ids...)
}

// Mutation returns the CommandMutation object of the builder.
func (cu *CommandUpdate) Mutation() *CommandMutation {
	return cu.mutation
}

// ClearUser clears all "user" edges to type User.
func (cu *CommandUpdate) ClearUser() *CommandUpdate {
	cu.mutation.ClearUser()
	return cu
}

// RemoveUserIDs removes the user edge to User by ids.
func (cu *CommandUpdate) RemoveUserIDs(ids ...int) *CommandUpdate {
	cu.mutation.RemoveUserIDs(ids...)
	return cu
}

// RemoveUser removes user edges to User.
func (cu *CommandUpdate) RemoveUser(u ...*User) *CommandUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cu.RemoveUserIDs(ids...)
}

// ClearTag clears all "tag" edges to type Tag.
func (cu *CommandUpdate) ClearTag() *CommandUpdate {
	cu.mutation.ClearTag()
	return cu
}

// RemoveTagIDs removes the tag edge to Tag by ids.
func (cu *CommandUpdate) RemoveTagIDs(ids ...int) *CommandUpdate {
	cu.mutation.RemoveTagIDs(ids...)
	return cu
}

// RemoveTag removes tag edges to Tag.
func (cu *CommandUpdate) RemoveTag(t ...*Tag) *CommandUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cu.RemoveTagIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CommandUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cu.hooks) == 0 {
		if err = cu.check(); err != nil {
			return 0, err
		}
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CommandMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cu.check(); err != nil {
				return 0, err
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CommandUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CommandUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CommandUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CommandUpdate) check() error {
	if v, ok := cu.mutation.Cooldown(); ok {
		if err := command.CooldownValidator(v); err != nil {
			return &ValidationError{Name: "cooldown", err: fmt.Errorf("ent: validator failed for field \"cooldown\": %w", err)}
		}
	}
	if v, ok := cu.mutation.Timeout(); ok {
		if err := command.TimeoutValidator(v); err != nil {
			return &ValidationError{Name: "timeout", err: fmt.Errorf("ent: validator failed for field \"timeout\": %w", err)}
		}
	}
	return nil
}

func (cu *CommandUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   command.Table,
			Columns: command.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: command.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: command.FieldName,
		})
	}
	if value, ok := cu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: command.FieldDescription,
		})
	}
	if value, ok := cu.mutation.Program(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: command.FieldProgram,
		})
	}
	if value, ok := cu.mutation.Args(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: command.FieldArgs,
		})
	}
	if value, ok := cu.mutation.IgnoreErrors(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: command.FieldIgnoreErrors,
		})
	}
	if value, ok := cu.mutation.Disabled(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: command.FieldDisabled,
		})
	}
	if value, ok := cu.mutation.Cooldown(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: command.FieldCooldown,
		})
	}
	if value, ok := cu.mutation.AddedCooldown(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: command.FieldCooldown,
		})
	}
	if value, ok := cu.mutation.Timeout(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: command.FieldTimeout,
		})
	}
	if value, ok := cu.mutation.AddedTimeout(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: command.FieldTimeout,
		})
	}
	if value, ok := cu.mutation.Vars(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: command.FieldVars,
		})
	}
	if cu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   command.UserTable,
			Columns: []string{command.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedUserIDs(); len(nodes) > 0 && !cu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   command.UserTable,
			Columns: []string{command.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   command.UserTable,
			Columns: []string{command.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.TagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   command.TagTable,
			Columns: []string{command.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedTagIDs(); len(nodes) > 0 && !cu.mutation.TagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   command.TagTable,
			Columns: []string{command.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.TagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   command.TagTable,
			Columns: []string{command.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{command.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// CommandUpdateOne is the builder for updating a single Command entity.
type CommandUpdateOne struct {
	config
	hooks    []Hook
	mutation *CommandMutation
}

// SetName sets the name field.
func (cuo *CommandUpdateOne) SetName(s string) *CommandUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetDescription sets the description field.
func (cuo *CommandUpdateOne) SetDescription(s string) *CommandUpdateOne {
	cuo.mutation.SetDescription(s)
	return cuo
}

// SetProgram sets the program field.
func (cuo *CommandUpdateOne) SetProgram(s string) *CommandUpdateOne {
	cuo.mutation.SetProgram(s)
	return cuo
}

// SetArgs sets the args field.
func (cuo *CommandUpdateOne) SetArgs(s []string) *CommandUpdateOne {
	cuo.mutation.SetArgs(s)
	return cuo
}

// SetIgnoreErrors sets the ignore_errors field.
func (cuo *CommandUpdateOne) SetIgnoreErrors(b bool) *CommandUpdateOne {
	cuo.mutation.SetIgnoreErrors(b)
	return cuo
}

// SetDisabled sets the disabled field.
func (cuo *CommandUpdateOne) SetDisabled(b bool) *CommandUpdateOne {
	cuo.mutation.SetDisabled(b)
	return cuo
}

// SetCooldown sets the cooldown field.
func (cuo *CommandUpdateOne) SetCooldown(i int) *CommandUpdateOne {
	cuo.mutation.ResetCooldown()
	cuo.mutation.SetCooldown(i)
	return cuo
}

// AddCooldown adds i to cooldown.
func (cuo *CommandUpdateOne) AddCooldown(i int) *CommandUpdateOne {
	cuo.mutation.AddCooldown(i)
	return cuo
}

// SetTimeout sets the timeout field.
func (cuo *CommandUpdateOne) SetTimeout(i int) *CommandUpdateOne {
	cuo.mutation.ResetTimeout()
	cuo.mutation.SetTimeout(i)
	return cuo
}

// AddTimeout adds i to timeout.
func (cuo *CommandUpdateOne) AddTimeout(i int) *CommandUpdateOne {
	cuo.mutation.AddTimeout(i)
	return cuo
}

// SetVars sets the vars field.
func (cuo *CommandUpdateOne) SetVars(m map[string]string) *CommandUpdateOne {
	cuo.mutation.SetVars(m)
	return cuo
}

// AddUserIDs adds the user edge to User by ids.
func (cuo *CommandUpdateOne) AddUserIDs(ids ...int) *CommandUpdateOne {
	cuo.mutation.AddUserIDs(ids...)
	return cuo
}

// AddUser adds the user edges to User.
func (cuo *CommandUpdateOne) AddUser(u ...*User) *CommandUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cuo.AddUserIDs(ids...)
}

// AddTagIDs adds the tag edge to Tag by ids.
func (cuo *CommandUpdateOne) AddTagIDs(ids ...int) *CommandUpdateOne {
	cuo.mutation.AddTagIDs(ids...)
	return cuo
}

// AddTag adds the tag edges to Tag.
func (cuo *CommandUpdateOne) AddTag(t ...*Tag) *CommandUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cuo.AddTagIDs(ids...)
}

// Mutation returns the CommandMutation object of the builder.
func (cuo *CommandUpdateOne) Mutation() *CommandMutation {
	return cuo.mutation
}

// ClearUser clears all "user" edges to type User.
func (cuo *CommandUpdateOne) ClearUser() *CommandUpdateOne {
	cuo.mutation.ClearUser()
	return cuo
}

// RemoveUserIDs removes the user edge to User by ids.
func (cuo *CommandUpdateOne) RemoveUserIDs(ids ...int) *CommandUpdateOne {
	cuo.mutation.RemoveUserIDs(ids...)
	return cuo
}

// RemoveUser removes user edges to User.
func (cuo *CommandUpdateOne) RemoveUser(u ...*User) *CommandUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cuo.RemoveUserIDs(ids...)
}

// ClearTag clears all "tag" edges to type Tag.
func (cuo *CommandUpdateOne) ClearTag() *CommandUpdateOne {
	cuo.mutation.ClearTag()
	return cuo
}

// RemoveTagIDs removes the tag edge to Tag by ids.
func (cuo *CommandUpdateOne) RemoveTagIDs(ids ...int) *CommandUpdateOne {
	cuo.mutation.RemoveTagIDs(ids...)
	return cuo
}

// RemoveTag removes tag edges to Tag.
func (cuo *CommandUpdateOne) RemoveTag(t ...*Tag) *CommandUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cuo.RemoveTagIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (cuo *CommandUpdateOne) Save(ctx context.Context) (*Command, error) {
	var (
		err  error
		node *Command
	)
	if len(cuo.hooks) == 0 {
		if err = cuo.check(); err != nil {
			return nil, err
		}
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CommandMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cuo.check(); err != nil {
				return nil, err
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CommandUpdateOne) SaveX(ctx context.Context) *Command {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CommandUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CommandUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CommandUpdateOne) check() error {
	if v, ok := cuo.mutation.Cooldown(); ok {
		if err := command.CooldownValidator(v); err != nil {
			return &ValidationError{Name: "cooldown", err: fmt.Errorf("ent: validator failed for field \"cooldown\": %w", err)}
		}
	}
	if v, ok := cuo.mutation.Timeout(); ok {
		if err := command.TimeoutValidator(v); err != nil {
			return &ValidationError{Name: "timeout", err: fmt.Errorf("ent: validator failed for field \"timeout\": %w", err)}
		}
	}
	return nil
}

func (cuo *CommandUpdateOne) sqlSave(ctx context.Context) (_node *Command, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   command.Table,
			Columns: command.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: command.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Command.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := cuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: command.FieldName,
		})
	}
	if value, ok := cuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: command.FieldDescription,
		})
	}
	if value, ok := cuo.mutation.Program(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: command.FieldProgram,
		})
	}
	if value, ok := cuo.mutation.Args(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: command.FieldArgs,
		})
	}
	if value, ok := cuo.mutation.IgnoreErrors(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: command.FieldIgnoreErrors,
		})
	}
	if value, ok := cuo.mutation.Disabled(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: command.FieldDisabled,
		})
	}
	if value, ok := cuo.mutation.Cooldown(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: command.FieldCooldown,
		})
	}
	if value, ok := cuo.mutation.AddedCooldown(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: command.FieldCooldown,
		})
	}
	if value, ok := cuo.mutation.Timeout(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: command.FieldTimeout,
		})
	}
	if value, ok := cuo.mutation.AddedTimeout(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: command.FieldTimeout,
		})
	}
	if value, ok := cuo.mutation.Vars(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: command.FieldVars,
		})
	}
	if cuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   command.UserTable,
			Columns: []string{command.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedUserIDs(); len(nodes) > 0 && !cuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   command.UserTable,
			Columns: []string{command.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   command.UserTable,
			Columns: []string{command.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.TagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   command.TagTable,
			Columns: []string{command.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedTagIDs(); len(nodes) > 0 && !cuo.mutation.TagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   command.TagTable,
			Columns: []string{command.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.TagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   command.TagTable,
			Columns: []string{command.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Command{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{command.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
