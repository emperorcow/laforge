// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/gen0cide/laforge/ent/dns"
)

// DNSCreate is the builder for creating a DNS entity.
type DNSCreate struct {
	config
	mutation *DNSMutation
	hooks    []Hook
}

// SetType sets the type field.
func (dc *DNSCreate) SetType(s string) *DNSCreate {
	dc.mutation.SetType(s)
	return dc
}

// SetRootDomain sets the root_domain field.
func (dc *DNSCreate) SetRootDomain(s string) *DNSCreate {
	dc.mutation.SetRootDomain(s)
	return dc
}

// SetDNSServers sets the dns_servers field.
func (dc *DNSCreate) SetDNSServers(s []string) *DNSCreate {
	dc.mutation.SetDNSServers(s)
	return dc
}

// SetNtpServers sets the ntp_servers field.
func (dc *DNSCreate) SetNtpServers(s []string) *DNSCreate {
	dc.mutation.SetNtpServers(s)
	return dc
}

// SetConfig sets the config field.
func (dc *DNSCreate) SetConfig(m map[string]string) *DNSCreate {
	dc.mutation.SetConfig(m)
	return dc
}

// Mutation returns the DNSMutation object of the builder.
func (dc *DNSCreate) Mutation() *DNSMutation {
	return dc.mutation
}

// Save creates the DNS in the database.
func (dc *DNSCreate) Save(ctx context.Context) (*DNS, error) {
	var (
		err  error
		node *DNS
	)
	if len(dc.hooks) == 0 {
		if err = dc.check(); err != nil {
			return nil, err
		}
		node, err = dc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DNSMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dc.check(); err != nil {
				return nil, err
			}
			dc.mutation = mutation
			node, err = dc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dc.hooks) - 1; i >= 0; i-- {
			mut = dc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DNSCreate) SaveX(ctx context.Context) *DNS {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (dc *DNSCreate) check() error {
	if _, ok := dc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New("ent: missing required field \"type\"")}
	}
	if _, ok := dc.mutation.RootDomain(); !ok {
		return &ValidationError{Name: "root_domain", err: errors.New("ent: missing required field \"root_domain\"")}
	}
	if _, ok := dc.mutation.DNSServers(); !ok {
		return &ValidationError{Name: "dns_servers", err: errors.New("ent: missing required field \"dns_servers\"")}
	}
	if _, ok := dc.mutation.NtpServers(); !ok {
		return &ValidationError{Name: "ntp_servers", err: errors.New("ent: missing required field \"ntp_servers\"")}
	}
	if _, ok := dc.mutation.Config(); !ok {
		return &ValidationError{Name: "config", err: errors.New("ent: missing required field \"config\"")}
	}
	return nil
}

func (dc *DNSCreate) sqlSave(ctx context.Context) (*DNS, error) {
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (dc *DNSCreate) createSpec() (*DNS, *sqlgraph.CreateSpec) {
	var (
		_node = &DNS{config: dc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: dns.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dns.FieldID,
			},
		}
	)
	if value, ok := dc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dns.FieldType,
		})
		_node.Type = value
	}
	if value, ok := dc.mutation.RootDomain(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dns.FieldRootDomain,
		})
		_node.RootDomain = value
	}
	if value, ok := dc.mutation.DNSServers(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: dns.FieldDNSServers,
		})
		_node.DNSServers = value
	}
	if value, ok := dc.mutation.NtpServers(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: dns.FieldNtpServers,
		})
		_node.NtpServers = value
	}
	if value, ok := dc.mutation.Config(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: dns.FieldConfig,
		})
		_node.Config = value
	}
	return _node, _spec
}

// DNSCreateBulk is the builder for creating a bulk of DNS entities.
type DNSCreateBulk struct {
	config
	builders []*DNSCreate
}

// Save creates the DNS entities in the database.
func (dcb *DNSCreateBulk) Save(ctx context.Context) ([]*DNS, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*DNS, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DNSMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (dcb *DNSCreateBulk) SaveX(ctx context.Context) []*DNS {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
