// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
	"github.com/gen0cide/laforge/ent/remotefile"
)

// RemoteFile is the model entity for the RemoteFile schema.
type RemoteFile struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// SourceType holds the value of the "source_type" field.
	SourceType string `json:"source_type,omitempty"`
	// Source holds the value of the "source" field.
	Source string `json:"source,omitempty"`
	// Destination holds the value of the "destination" field.
	Destination string `json:"destination,omitempty"`
	// Vars holds the value of the "vars" field.
	Vars map[string]string `json:"vars,omitempty"`
	// Template holds the value of the "template" field.
	Template bool `json:"template,omitempty"`
	// Perms holds the value of the "perms" field.
	Perms string `json:"perms,omitempty"`
	// Disabled holds the value of the "disabled" field.
	Disabled bool `json:"disabled,omitempty"`
	// Md5 holds the value of the "md5" field.
	Md5 string `json:"md5,omitempty"`
	// AbsPath holds the value of the "abs_path" field.
	AbsPath string `json:"abs_path,omitempty"`
	// Ext holds the value of the "ext" field.
	Ext string `json:"ext,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RemoteFileQuery when eager-loading is set.
	Edges                         RemoteFileEdges `json:"edges"`
	provisioning_step_remote_file *int
}

// RemoteFileEdges holds the relations/edges for other nodes in the graph.
type RemoteFileEdges struct {
	// Tag holds the value of the tag edge.
	Tag []*Tag
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TagOrErr returns the Tag value or an error if the edge
// was not loaded in eager-loading.
func (e RemoteFileEdges) TagOrErr() ([]*Tag, error) {
	if e.loadedTypes[0] {
		return e.Tag, nil
	}
	return nil, &NotLoadedError{edge: "tag"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RemoteFile) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // source_type
		&sql.NullString{}, // source
		&sql.NullString{}, // destination
		&[]byte{},         // vars
		&sql.NullBool{},   // template
		&sql.NullString{}, // perms
		&sql.NullBool{},   // disabled
		&sql.NullString{}, // md5
		&sql.NullString{}, // abs_path
		&sql.NullString{}, // ext
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*RemoteFile) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // provisioning_step_remote_file
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RemoteFile fields.
func (rf *RemoteFile) assignValues(values ...interface{}) error {
	if m, n := len(values), len(remotefile.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	rf.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field source_type", values[0])
	} else if value.Valid {
		rf.SourceType = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field source", values[1])
	} else if value.Valid {
		rf.Source = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field destination", values[2])
	} else if value.Valid {
		rf.Destination = value.String
	}

	if value, ok := values[3].(*[]byte); !ok {
		return fmt.Errorf("unexpected type %T for field vars", values[3])
	} else if value != nil && len(*value) > 0 {
		if err := json.Unmarshal(*value, &rf.Vars); err != nil {
			return fmt.Errorf("unmarshal field vars: %v", err)
		}
	}
	if value, ok := values[4].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field template", values[4])
	} else if value.Valid {
		rf.Template = value.Bool
	}
	if value, ok := values[5].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field perms", values[5])
	} else if value.Valid {
		rf.Perms = value.String
	}
	if value, ok := values[6].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field disabled", values[6])
	} else if value.Valid {
		rf.Disabled = value.Bool
	}
	if value, ok := values[7].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field md5", values[7])
	} else if value.Valid {
		rf.Md5 = value.String
	}
	if value, ok := values[8].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field abs_path", values[8])
	} else if value.Valid {
		rf.AbsPath = value.String
	}
	if value, ok := values[9].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field ext", values[9])
	} else if value.Valid {
		rf.Ext = value.String
	}
	values = values[10:]
	if len(values) == len(remotefile.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field provisioning_step_remote_file", value)
		} else if value.Valid {
			rf.provisioning_step_remote_file = new(int)
			*rf.provisioning_step_remote_file = int(value.Int64)
		}
	}
	return nil
}

// QueryTag queries the tag edge of the RemoteFile.
func (rf *RemoteFile) QueryTag() *TagQuery {
	return (&RemoteFileClient{config: rf.config}).QueryTag(rf)
}

// Update returns a builder for updating this RemoteFile.
// Note that, you need to call RemoteFile.Unwrap() before calling this method, if this RemoteFile
// was returned from a transaction, and the transaction was committed or rolled back.
func (rf *RemoteFile) Update() *RemoteFileUpdateOne {
	return (&RemoteFileClient{config: rf.config}).UpdateOne(rf)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (rf *RemoteFile) Unwrap() *RemoteFile {
	tx, ok := rf.config.driver.(*txDriver)
	if !ok {
		panic("ent: RemoteFile is not a transactional entity")
	}
	rf.config.driver = tx.drv
	return rf
}

// String implements the fmt.Stringer.
func (rf *RemoteFile) String() string {
	var builder strings.Builder
	builder.WriteString("RemoteFile(")
	builder.WriteString(fmt.Sprintf("id=%v", rf.ID))
	builder.WriteString(", source_type=")
	builder.WriteString(rf.SourceType)
	builder.WriteString(", source=")
	builder.WriteString(rf.Source)
	builder.WriteString(", destination=")
	builder.WriteString(rf.Destination)
	builder.WriteString(", vars=")
	builder.WriteString(fmt.Sprintf("%v", rf.Vars))
	builder.WriteString(", template=")
	builder.WriteString(fmt.Sprintf("%v", rf.Template))
	builder.WriteString(", perms=")
	builder.WriteString(rf.Perms)
	builder.WriteString(", disabled=")
	builder.WriteString(fmt.Sprintf("%v", rf.Disabled))
	builder.WriteString(", md5=")
	builder.WriteString(rf.Md5)
	builder.WriteString(", abs_path=")
	builder.WriteString(rf.AbsPath)
	builder.WriteString(", ext=")
	builder.WriteString(rf.Ext)
	builder.WriteByte(')')
	return builder.String()
}

// RemoteFiles is a parsable slice of RemoteFile.
type RemoteFiles []*RemoteFile

func (rf RemoteFiles) config(cfg config) {
	for _i := range rf {
		rf[_i].config = cfg
	}
}
