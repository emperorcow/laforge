// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/gen0cide/laforge/ent/command"
	"github.com/gen0cide/laforge/ent/dnsrecord"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/gen0cide/laforge/ent/provisionedhost"
	"github.com/gen0cide/laforge/ent/provisioningstep"
	"github.com/gen0cide/laforge/ent/remotefile"
	"github.com/gen0cide/laforge/ent/script"
)

// ProvisioningStepQuery is the builder for querying ProvisioningStep entities.
type ProvisioningStepQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	predicates []predicate.ProvisioningStep
	// eager-loading edges.
	withProvisionedHost *ProvisionedHostQuery
	withScript          *ScriptQuery
	withCommand         *CommandQuery
	withDNSRecord       *DNSRecordQuery
	withRemoteFile      *RemoteFileQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the builder.
func (psq *ProvisioningStepQuery) Where(ps ...predicate.ProvisioningStep) *ProvisioningStepQuery {
	psq.predicates = append(psq.predicates, ps...)
	return psq
}

// Limit adds a limit step to the query.
func (psq *ProvisioningStepQuery) Limit(limit int) *ProvisioningStepQuery {
	psq.limit = &limit
	return psq
}

// Offset adds an offset step to the query.
func (psq *ProvisioningStepQuery) Offset(offset int) *ProvisioningStepQuery {
	psq.offset = &offset
	return psq
}

// Order adds an order step to the query.
func (psq *ProvisioningStepQuery) Order(o ...OrderFunc) *ProvisioningStepQuery {
	psq.order = append(psq.order, o...)
	return psq
}

// QueryProvisionedHost chains the current query on the provisioned_host edge.
func (psq *ProvisioningStepQuery) QueryProvisionedHost() *ProvisionedHostQuery {
	query := &ProvisionedHostQuery{config: psq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := psq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(provisioningstep.Table, provisioningstep.FieldID, selector),
			sqlgraph.To(provisionedhost.Table, provisionedhost.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, provisioningstep.ProvisionedHostTable, provisioningstep.ProvisionedHostPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(psq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryScript chains the current query on the script edge.
func (psq *ProvisioningStepQuery) QueryScript() *ScriptQuery {
	query := &ScriptQuery{config: psq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := psq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(provisioningstep.Table, provisioningstep.FieldID, selector),
			sqlgraph.To(script.Table, script.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, provisioningstep.ScriptTable, provisioningstep.ScriptColumn),
		)
		fromU = sqlgraph.SetNeighbors(psq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCommand chains the current query on the command edge.
func (psq *ProvisioningStepQuery) QueryCommand() *CommandQuery {
	query := &CommandQuery{config: psq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := psq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(provisioningstep.Table, provisioningstep.FieldID, selector),
			sqlgraph.To(command.Table, command.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, provisioningstep.CommandTable, provisioningstep.CommandColumn),
		)
		fromU = sqlgraph.SetNeighbors(psq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDNSRecord chains the current query on the dns_record edge.
func (psq *ProvisioningStepQuery) QueryDNSRecord() *DNSRecordQuery {
	query := &DNSRecordQuery{config: psq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := psq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(provisioningstep.Table, provisioningstep.FieldID, selector),
			sqlgraph.To(dnsrecord.Table, dnsrecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, provisioningstep.DNSRecordTable, provisioningstep.DNSRecordColumn),
		)
		fromU = sqlgraph.SetNeighbors(psq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRemoteFile chains the current query on the remote_file edge.
func (psq *ProvisioningStepQuery) QueryRemoteFile() *RemoteFileQuery {
	query := &RemoteFileQuery{config: psq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := psq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(provisioningstep.Table, provisioningstep.FieldID, selector),
			sqlgraph.To(remotefile.Table, remotefile.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, provisioningstep.RemoteFileTable, provisioningstep.RemoteFileColumn),
		)
		fromU = sqlgraph.SetNeighbors(psq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ProvisioningStep entity in the query. Returns *NotFoundError when no provisioningstep was found.
func (psq *ProvisioningStepQuery) First(ctx context.Context) (*ProvisioningStep, error) {
	nodes, err := psq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{provisioningstep.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (psq *ProvisioningStepQuery) FirstX(ctx context.Context) *ProvisioningStep {
	node, err := psq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ProvisioningStep id in the query. Returns *NotFoundError when no id was found.
func (psq *ProvisioningStepQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = psq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{provisioningstep.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (psq *ProvisioningStepQuery) FirstIDX(ctx context.Context) int {
	id, err := psq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only ProvisioningStep entity in the query, returns an error if not exactly one entity was returned.
func (psq *ProvisioningStepQuery) Only(ctx context.Context) (*ProvisioningStep, error) {
	nodes, err := psq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{provisioningstep.Label}
	default:
		return nil, &NotSingularError{provisioningstep.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (psq *ProvisioningStepQuery) OnlyX(ctx context.Context) *ProvisioningStep {
	node, err := psq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID returns the only ProvisioningStep id in the query, returns an error if not exactly one id was returned.
func (psq *ProvisioningStepQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = psq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{provisioningstep.Label}
	default:
		err = &NotSingularError{provisioningstep.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (psq *ProvisioningStepQuery) OnlyIDX(ctx context.Context) int {
	id, err := psq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ProvisioningSteps.
func (psq *ProvisioningStepQuery) All(ctx context.Context) ([]*ProvisioningStep, error) {
	if err := psq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return psq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (psq *ProvisioningStepQuery) AllX(ctx context.Context) []*ProvisioningStep {
	nodes, err := psq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ProvisioningStep ids.
func (psq *ProvisioningStepQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := psq.Select(provisioningstep.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (psq *ProvisioningStepQuery) IDsX(ctx context.Context) []int {
	ids, err := psq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (psq *ProvisioningStepQuery) Count(ctx context.Context) (int, error) {
	if err := psq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return psq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (psq *ProvisioningStepQuery) CountX(ctx context.Context) int {
	count, err := psq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (psq *ProvisioningStepQuery) Exist(ctx context.Context) (bool, error) {
	if err := psq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return psq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (psq *ProvisioningStepQuery) ExistX(ctx context.Context) bool {
	exist, err := psq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (psq *ProvisioningStepQuery) Clone() *ProvisioningStepQuery {
	if psq == nil {
		return nil
	}
	return &ProvisioningStepQuery{
		config:              psq.config,
		limit:               psq.limit,
		offset:              psq.offset,
		order:               append([]OrderFunc{}, psq.order...),
		predicates:          append([]predicate.ProvisioningStep{}, psq.predicates...),
		withProvisionedHost: psq.withProvisionedHost.Clone(),
		withScript:          psq.withScript.Clone(),
		withCommand:         psq.withCommand.Clone(),
		withDNSRecord:       psq.withDNSRecord.Clone(),
		withRemoteFile:      psq.withRemoteFile.Clone(),
		// clone intermediate query.
		sql:  psq.sql.Clone(),
		path: psq.path,
	}
}

//  WithProvisionedHost tells the query-builder to eager-loads the nodes that are connected to
// the "provisioned_host" edge. The optional arguments used to configure the query builder of the edge.
func (psq *ProvisioningStepQuery) WithProvisionedHost(opts ...func(*ProvisionedHostQuery)) *ProvisioningStepQuery {
	query := &ProvisionedHostQuery{config: psq.config}
	for _, opt := range opts {
		opt(query)
	}
	psq.withProvisionedHost = query
	return psq
}

//  WithScript tells the query-builder to eager-loads the nodes that are connected to
// the "script" edge. The optional arguments used to configure the query builder of the edge.
func (psq *ProvisioningStepQuery) WithScript(opts ...func(*ScriptQuery)) *ProvisioningStepQuery {
	query := &ScriptQuery{config: psq.config}
	for _, opt := range opts {
		opt(query)
	}
	psq.withScript = query
	return psq
}

//  WithCommand tells the query-builder to eager-loads the nodes that are connected to
// the "command" edge. The optional arguments used to configure the query builder of the edge.
func (psq *ProvisioningStepQuery) WithCommand(opts ...func(*CommandQuery)) *ProvisioningStepQuery {
	query := &CommandQuery{config: psq.config}
	for _, opt := range opts {
		opt(query)
	}
	psq.withCommand = query
	return psq
}

//  WithDNSRecord tells the query-builder to eager-loads the nodes that are connected to
// the "dns_record" edge. The optional arguments used to configure the query builder of the edge.
func (psq *ProvisioningStepQuery) WithDNSRecord(opts ...func(*DNSRecordQuery)) *ProvisioningStepQuery {
	query := &DNSRecordQuery{config: psq.config}
	for _, opt := range opts {
		opt(query)
	}
	psq.withDNSRecord = query
	return psq
}

//  WithRemoteFile tells the query-builder to eager-loads the nodes that are connected to
// the "remote_file" edge. The optional arguments used to configure the query builder of the edge.
func (psq *ProvisioningStepQuery) WithRemoteFile(opts ...func(*RemoteFileQuery)) *ProvisioningStepQuery {
	query := &RemoteFileQuery{config: psq.config}
	for _, opt := range opts {
		opt(query)
	}
	psq.withRemoteFile = query
	return psq
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ProvisionerType string `json:"provisioner_type,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ProvisioningStep.Query().
//		GroupBy(provisioningstep.FieldProvisionerType).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (psq *ProvisioningStepQuery) GroupBy(field string, fields ...string) *ProvisioningStepGroupBy {
	group := &ProvisioningStepGroupBy{config: psq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return psq.sqlQuery(), nil
	}
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		ProvisionerType string `json:"provisioner_type,omitempty"`
//	}
//
//	client.ProvisioningStep.Query().
//		Select(provisioningstep.FieldProvisionerType).
//		Scan(ctx, &v)
//
func (psq *ProvisioningStepQuery) Select(field string, fields ...string) *ProvisioningStepSelect {
	selector := &ProvisioningStepSelect{config: psq.config}
	selector.fields = append([]string{field}, fields...)
	selector.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return psq.sqlQuery(), nil
	}
	return selector
}

func (psq *ProvisioningStepQuery) prepareQuery(ctx context.Context) error {
	if psq.path != nil {
		prev, err := psq.path(ctx)
		if err != nil {
			return err
		}
		psq.sql = prev
	}
	return nil
}

func (psq *ProvisioningStepQuery) sqlAll(ctx context.Context) ([]*ProvisioningStep, error) {
	var (
		nodes       = []*ProvisioningStep{}
		_spec       = psq.querySpec()
		loadedTypes = [5]bool{
			psq.withProvisionedHost != nil,
			psq.withScript != nil,
			psq.withCommand != nil,
			psq.withDNSRecord != nil,
			psq.withRemoteFile != nil,
		}
	)
	_spec.ScanValues = func() []interface{} {
		node := &ProvisioningStep{config: psq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, psq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := psq.withProvisionedHost; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[int]*ProvisioningStep, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
			node.Edges.ProvisionedHost = []*ProvisionedHost{}
		}
		var (
			edgeids []int
			edges   = make(map[int][]*ProvisioningStep)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: false,
				Table:   provisioningstep.ProvisionedHostTable,
				Columns: provisioningstep.ProvisionedHostPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(provisioningstep.ProvisionedHostPrimaryKey[0], fks...))
			},

			ScanValues: func() [2]interface{} {
				return [2]interface{}{&sql.NullInt64{}, &sql.NullInt64{}}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullInt64)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullInt64)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := int(eout.Int64)
				inValue := int(ein.Int64)
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				edgeids = append(edgeids, inValue)
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, psq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "provisioned_host": %v`, err)
		}
		query.Where(provisionedhost.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "provisioned_host" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.ProvisionedHost = append(nodes[i].Edges.ProvisionedHost, n)
			}
		}
	}

	if query := psq.withScript; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*ProvisioningStep)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Script = []*Script{}
		}
		query.withFKs = true
		query.Where(predicate.Script(func(s *sql.Selector) {
			s.Where(sql.InValues(provisioningstep.ScriptColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.provisioning_step_script
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "provisioning_step_script" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "provisioning_step_script" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Script = append(node.Edges.Script, n)
		}
	}

	if query := psq.withCommand; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*ProvisioningStep)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Command = []*Command{}
		}
		query.withFKs = true
		query.Where(predicate.Command(func(s *sql.Selector) {
			s.Where(sql.InValues(provisioningstep.CommandColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.provisioning_step_command
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "provisioning_step_command" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "provisioning_step_command" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Command = append(node.Edges.Command, n)
		}
	}

	if query := psq.withDNSRecord; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*ProvisioningStep)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.DNSRecord = []*DNSRecord{}
		}
		query.withFKs = true
		query.Where(predicate.DNSRecord(func(s *sql.Selector) {
			s.Where(sql.InValues(provisioningstep.DNSRecordColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.provisioning_step_dns_record
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "provisioning_step_dns_record" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "provisioning_step_dns_record" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.DNSRecord = append(node.Edges.DNSRecord, n)
		}
	}

	if query := psq.withRemoteFile; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*ProvisioningStep)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.RemoteFile = []*RemoteFile{}
		}
		query.withFKs = true
		query.Where(predicate.RemoteFile(func(s *sql.Selector) {
			s.Where(sql.InValues(provisioningstep.RemoteFileColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.provisioning_step_remote_file
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "provisioning_step_remote_file" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "provisioning_step_remote_file" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.RemoteFile = append(node.Edges.RemoteFile, n)
		}
	}

	return nodes, nil
}

func (psq *ProvisioningStepQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := psq.querySpec()
	return sqlgraph.CountNodes(ctx, psq.driver, _spec)
}

func (psq *ProvisioningStepQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := psq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (psq *ProvisioningStepQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   provisioningstep.Table,
			Columns: provisioningstep.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: provisioningstep.FieldID,
			},
		},
		From:   psq.sql,
		Unique: true,
	}
	if ps := psq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := psq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := psq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := psq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector, provisioningstep.ValidColumn)
			}
		}
	}
	return _spec
}

func (psq *ProvisioningStepQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(psq.driver.Dialect())
	t1 := builder.Table(provisioningstep.Table)
	selector := builder.Select(t1.Columns(provisioningstep.Columns...)...).From(t1)
	if psq.sql != nil {
		selector = psq.sql
		selector.Select(selector.Columns(provisioningstep.Columns...)...)
	}
	for _, p := range psq.predicates {
		p(selector)
	}
	for _, p := range psq.order {
		p(selector, provisioningstep.ValidColumn)
	}
	if offset := psq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := psq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ProvisioningStepGroupBy is the builder for group-by ProvisioningStep entities.
type ProvisioningStepGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (psgb *ProvisioningStepGroupBy) Aggregate(fns ...AggregateFunc) *ProvisioningStepGroupBy {
	psgb.fns = append(psgb.fns, fns...)
	return psgb
}

// Scan applies the group-by query and scan the result into the given value.
func (psgb *ProvisioningStepGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := psgb.path(ctx)
	if err != nil {
		return err
	}
	psgb.sql = query
	return psgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (psgb *ProvisioningStepGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := psgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (psgb *ProvisioningStepGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(psgb.fields) > 1 {
		return nil, errors.New("ent: ProvisioningStepGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := psgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (psgb *ProvisioningStepGroupBy) StringsX(ctx context.Context) []string {
	v, err := psgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from group-by. It is only allowed when querying group-by with one field.
func (psgb *ProvisioningStepGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = psgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{provisioningstep.Label}
	default:
		err = fmt.Errorf("ent: ProvisioningStepGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (psgb *ProvisioningStepGroupBy) StringX(ctx context.Context) string {
	v, err := psgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (psgb *ProvisioningStepGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(psgb.fields) > 1 {
		return nil, errors.New("ent: ProvisioningStepGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := psgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (psgb *ProvisioningStepGroupBy) IntsX(ctx context.Context) []int {
	v, err := psgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from group-by. It is only allowed when querying group-by with one field.
func (psgb *ProvisioningStepGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = psgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{provisioningstep.Label}
	default:
		err = fmt.Errorf("ent: ProvisioningStepGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (psgb *ProvisioningStepGroupBy) IntX(ctx context.Context) int {
	v, err := psgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (psgb *ProvisioningStepGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(psgb.fields) > 1 {
		return nil, errors.New("ent: ProvisioningStepGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := psgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (psgb *ProvisioningStepGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := psgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from group-by. It is only allowed when querying group-by with one field.
func (psgb *ProvisioningStepGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = psgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{provisioningstep.Label}
	default:
		err = fmt.Errorf("ent: ProvisioningStepGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (psgb *ProvisioningStepGroupBy) Float64X(ctx context.Context) float64 {
	v, err := psgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (psgb *ProvisioningStepGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(psgb.fields) > 1 {
		return nil, errors.New("ent: ProvisioningStepGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := psgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (psgb *ProvisioningStepGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := psgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from group-by. It is only allowed when querying group-by with one field.
func (psgb *ProvisioningStepGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = psgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{provisioningstep.Label}
	default:
		err = fmt.Errorf("ent: ProvisioningStepGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (psgb *ProvisioningStepGroupBy) BoolX(ctx context.Context) bool {
	v, err := psgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (psgb *ProvisioningStepGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range psgb.fields {
		if !provisioningstep.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := psgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := psgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (psgb *ProvisioningStepGroupBy) sqlQuery() *sql.Selector {
	selector := psgb.sql
	columns := make([]string, 0, len(psgb.fields)+len(psgb.fns))
	columns = append(columns, psgb.fields...)
	for _, fn := range psgb.fns {
		columns = append(columns, fn(selector, provisioningstep.ValidColumn))
	}
	return selector.Select(columns...).GroupBy(psgb.fields...)
}

// ProvisioningStepSelect is the builder for select fields of ProvisioningStep entities.
type ProvisioningStepSelect struct {
	config
	fields []string
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Scan applies the selector query and scan the result into the given value.
func (pss *ProvisioningStepSelect) Scan(ctx context.Context, v interface{}) error {
	query, err := pss.path(ctx)
	if err != nil {
		return err
	}
	pss.sql = query
	return pss.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (pss *ProvisioningStepSelect) ScanX(ctx context.Context, v interface{}) {
	if err := pss.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (pss *ProvisioningStepSelect) Strings(ctx context.Context) ([]string, error) {
	if len(pss.fields) > 1 {
		return nil, errors.New("ent: ProvisioningStepSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := pss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (pss *ProvisioningStepSelect) StringsX(ctx context.Context) []string {
	v, err := pss.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from selector. It is only allowed when selecting one field.
func (pss *ProvisioningStepSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = pss.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{provisioningstep.Label}
	default:
		err = fmt.Errorf("ent: ProvisioningStepSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (pss *ProvisioningStepSelect) StringX(ctx context.Context) string {
	v, err := pss.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (pss *ProvisioningStepSelect) Ints(ctx context.Context) ([]int, error) {
	if len(pss.fields) > 1 {
		return nil, errors.New("ent: ProvisioningStepSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := pss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (pss *ProvisioningStepSelect) IntsX(ctx context.Context) []int {
	v, err := pss.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from selector. It is only allowed when selecting one field.
func (pss *ProvisioningStepSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = pss.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{provisioningstep.Label}
	default:
		err = fmt.Errorf("ent: ProvisioningStepSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (pss *ProvisioningStepSelect) IntX(ctx context.Context) int {
	v, err := pss.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (pss *ProvisioningStepSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(pss.fields) > 1 {
		return nil, errors.New("ent: ProvisioningStepSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := pss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (pss *ProvisioningStepSelect) Float64sX(ctx context.Context) []float64 {
	v, err := pss.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from selector. It is only allowed when selecting one field.
func (pss *ProvisioningStepSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = pss.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{provisioningstep.Label}
	default:
		err = fmt.Errorf("ent: ProvisioningStepSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (pss *ProvisioningStepSelect) Float64X(ctx context.Context) float64 {
	v, err := pss.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (pss *ProvisioningStepSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(pss.fields) > 1 {
		return nil, errors.New("ent: ProvisioningStepSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := pss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (pss *ProvisioningStepSelect) BoolsX(ctx context.Context) []bool {
	v, err := pss.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from selector. It is only allowed when selecting one field.
func (pss *ProvisioningStepSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = pss.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{provisioningstep.Label}
	default:
		err = fmt.Errorf("ent: ProvisioningStepSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (pss *ProvisioningStepSelect) BoolX(ctx context.Context) bool {
	v, err := pss.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pss *ProvisioningStepSelect) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range pss.fields {
		if !provisioningstep.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for selection", f)}
		}
	}
	rows := &sql.Rows{}
	query, args := pss.sqlQuery().Query()
	if err := pss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (pss *ProvisioningStepSelect) sqlQuery() sql.Querier {
	selector := pss.sql
	selector.Select(selector.Columns(pss.fields...)...)
	return selector
}
