// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/gen0cide/laforge/ent/dnsrecord"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/gen0cide/laforge/ent/tag"
)

// DNSRecordUpdate is the builder for updating DNSRecord entities.
type DNSRecordUpdate struct {
	config
	hooks    []Hook
	mutation *DNSRecordMutation
}

// Where adds a new predicate for the builder.
func (dru *DNSRecordUpdate) Where(ps ...predicate.DNSRecord) *DNSRecordUpdate {
	dru.mutation.predicates = append(dru.mutation.predicates, ps...)
	return dru
}

// SetName sets the name field.
func (dru *DNSRecordUpdate) SetName(s string) *DNSRecordUpdate {
	dru.mutation.SetName(s)
	return dru
}

// SetValues sets the values field.
func (dru *DNSRecordUpdate) SetValues(s []string) *DNSRecordUpdate {
	dru.mutation.SetValues(s)
	return dru
}

// SetType sets the type field.
func (dru *DNSRecordUpdate) SetType(s string) *DNSRecordUpdate {
	dru.mutation.SetType(s)
	return dru
}

// SetZone sets the zone field.
func (dru *DNSRecordUpdate) SetZone(s string) *DNSRecordUpdate {
	dru.mutation.SetZone(s)
	return dru
}

// SetVars sets the vars field.
func (dru *DNSRecordUpdate) SetVars(m map[string]string) *DNSRecordUpdate {
	dru.mutation.SetVars(m)
	return dru
}

// SetDisabled sets the disabled field.
func (dru *DNSRecordUpdate) SetDisabled(b bool) *DNSRecordUpdate {
	dru.mutation.SetDisabled(b)
	return dru
}

// AddTagIDs adds the tag edge to Tag by ids.
func (dru *DNSRecordUpdate) AddTagIDs(ids ...int) *DNSRecordUpdate {
	dru.mutation.AddTagIDs(ids...)
	return dru
}

// AddTag adds the tag edges to Tag.
func (dru *DNSRecordUpdate) AddTag(t ...*Tag) *DNSRecordUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return dru.AddTagIDs(ids...)
}

// Mutation returns the DNSRecordMutation object of the builder.
func (dru *DNSRecordUpdate) Mutation() *DNSRecordMutation {
	return dru.mutation
}

// ClearTag clears all "tag" edges to type Tag.
func (dru *DNSRecordUpdate) ClearTag() *DNSRecordUpdate {
	dru.mutation.ClearTag()
	return dru
}

// RemoveTagIDs removes the tag edge to Tag by ids.
func (dru *DNSRecordUpdate) RemoveTagIDs(ids ...int) *DNSRecordUpdate {
	dru.mutation.RemoveTagIDs(ids...)
	return dru
}

// RemoveTag removes tag edges to Tag.
func (dru *DNSRecordUpdate) RemoveTag(t ...*Tag) *DNSRecordUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return dru.RemoveTagIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dru *DNSRecordUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(dru.hooks) == 0 {
		affected, err = dru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DNSRecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			dru.mutation = mutation
			affected, err = dru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(dru.hooks) - 1; i >= 0; i-- {
			mut = dru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (dru *DNSRecordUpdate) SaveX(ctx context.Context) int {
	affected, err := dru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dru *DNSRecordUpdate) Exec(ctx context.Context) error {
	_, err := dru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dru *DNSRecordUpdate) ExecX(ctx context.Context) {
	if err := dru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (dru *DNSRecordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dnsrecord.Table,
			Columns: dnsrecord.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dnsrecord.FieldID,
			},
		},
	}
	if ps := dru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dru.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dnsrecord.FieldName,
		})
	}
	if value, ok := dru.mutation.Values(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: dnsrecord.FieldValues,
		})
	}
	if value, ok := dru.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dnsrecord.FieldType,
		})
	}
	if value, ok := dru.mutation.Zone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dnsrecord.FieldZone,
		})
	}
	if value, ok := dru.mutation.Vars(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: dnsrecord.FieldVars,
		})
	}
	if value, ok := dru.mutation.Disabled(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: dnsrecord.FieldDisabled,
		})
	}
	if dru.mutation.TagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dnsrecord.TagTable,
			Columns: []string{dnsrecord.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dru.mutation.RemovedTagIDs(); len(nodes) > 0 && !dru.mutation.TagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dnsrecord.TagTable,
			Columns: []string{dnsrecord.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dru.mutation.TagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dnsrecord.TagTable,
			Columns: []string{dnsrecord.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dnsrecord.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// DNSRecordUpdateOne is the builder for updating a single DNSRecord entity.
type DNSRecordUpdateOne struct {
	config
	hooks    []Hook
	mutation *DNSRecordMutation
}

// SetName sets the name field.
func (druo *DNSRecordUpdateOne) SetName(s string) *DNSRecordUpdateOne {
	druo.mutation.SetName(s)
	return druo
}

// SetValues sets the values field.
func (druo *DNSRecordUpdateOne) SetValues(s []string) *DNSRecordUpdateOne {
	druo.mutation.SetValues(s)
	return druo
}

// SetType sets the type field.
func (druo *DNSRecordUpdateOne) SetType(s string) *DNSRecordUpdateOne {
	druo.mutation.SetType(s)
	return druo
}

// SetZone sets the zone field.
func (druo *DNSRecordUpdateOne) SetZone(s string) *DNSRecordUpdateOne {
	druo.mutation.SetZone(s)
	return druo
}

// SetVars sets the vars field.
func (druo *DNSRecordUpdateOne) SetVars(m map[string]string) *DNSRecordUpdateOne {
	druo.mutation.SetVars(m)
	return druo
}

// SetDisabled sets the disabled field.
func (druo *DNSRecordUpdateOne) SetDisabled(b bool) *DNSRecordUpdateOne {
	druo.mutation.SetDisabled(b)
	return druo
}

// AddTagIDs adds the tag edge to Tag by ids.
func (druo *DNSRecordUpdateOne) AddTagIDs(ids ...int) *DNSRecordUpdateOne {
	druo.mutation.AddTagIDs(ids...)
	return druo
}

// AddTag adds the tag edges to Tag.
func (druo *DNSRecordUpdateOne) AddTag(t ...*Tag) *DNSRecordUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return druo.AddTagIDs(ids...)
}

// Mutation returns the DNSRecordMutation object of the builder.
func (druo *DNSRecordUpdateOne) Mutation() *DNSRecordMutation {
	return druo.mutation
}

// ClearTag clears all "tag" edges to type Tag.
func (druo *DNSRecordUpdateOne) ClearTag() *DNSRecordUpdateOne {
	druo.mutation.ClearTag()
	return druo
}

// RemoveTagIDs removes the tag edge to Tag by ids.
func (druo *DNSRecordUpdateOne) RemoveTagIDs(ids ...int) *DNSRecordUpdateOne {
	druo.mutation.RemoveTagIDs(ids...)
	return druo
}

// RemoveTag removes tag edges to Tag.
func (druo *DNSRecordUpdateOne) RemoveTag(t ...*Tag) *DNSRecordUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return druo.RemoveTagIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (druo *DNSRecordUpdateOne) Save(ctx context.Context) (*DNSRecord, error) {
	var (
		err  error
		node *DNSRecord
	)
	if len(druo.hooks) == 0 {
		node, err = druo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DNSRecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			druo.mutation = mutation
			node, err = druo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(druo.hooks) - 1; i >= 0; i-- {
			mut = druo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, druo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (druo *DNSRecordUpdateOne) SaveX(ctx context.Context) *DNSRecord {
	node, err := druo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (druo *DNSRecordUpdateOne) Exec(ctx context.Context) error {
	_, err := druo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (druo *DNSRecordUpdateOne) ExecX(ctx context.Context) {
	if err := druo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (druo *DNSRecordUpdateOne) sqlSave(ctx context.Context) (_node *DNSRecord, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dnsrecord.Table,
			Columns: dnsrecord.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dnsrecord.FieldID,
			},
		},
	}
	id, ok := druo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing DNSRecord.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := druo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dnsrecord.FieldName,
		})
	}
	if value, ok := druo.mutation.Values(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: dnsrecord.FieldValues,
		})
	}
	if value, ok := druo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dnsrecord.FieldType,
		})
	}
	if value, ok := druo.mutation.Zone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dnsrecord.FieldZone,
		})
	}
	if value, ok := druo.mutation.Vars(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: dnsrecord.FieldVars,
		})
	}
	if value, ok := druo.mutation.Disabled(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: dnsrecord.FieldDisabled,
		})
	}
	if druo.mutation.TagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dnsrecord.TagTable,
			Columns: []string{dnsrecord.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := druo.mutation.RemovedTagIDs(); len(nodes) > 0 && !druo.mutation.TagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dnsrecord.TagTable,
			Columns: []string{dnsrecord.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := druo.mutation.TagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dnsrecord.TagTable,
			Columns: []string{dnsrecord.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DNSRecord{config: druo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, druo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dnsrecord.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
