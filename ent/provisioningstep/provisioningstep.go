// Code generated by entc, DO NOT EDIT.

package provisioningstep

const (
	// Label holds the string label denoting the provisioningstep type in the database.
	Label = "provisioning_step"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldProvisionerType holds the string denoting the provisioner_type field in the database.
	FieldProvisionerType = "provisioner_type"
	// FieldStepNumber holds the string denoting the step_number field in the database.
	FieldStepNumber = "step_number"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"

	// EdgeProvisionedHost holds the string denoting the provisioned_host edge name in mutations.
	EdgeProvisionedHost = "provisioned_host"
	// EdgeScript holds the string denoting the script edge name in mutations.
	EdgeScript = "script"
	// EdgeCommand holds the string denoting the command edge name in mutations.
	EdgeCommand = "command"
	// EdgeDNSRecord holds the string denoting the dns_record edge name in mutations.
	EdgeDNSRecord = "dns_record"
	// EdgeRemoteFile holds the string denoting the remote_file edge name in mutations.
	EdgeRemoteFile = "remote_file"

	// Table holds the table name of the provisioningstep in the database.
	Table = "provisioning_steps"
	// ProvisionedHostTable is the table the holds the provisioned_host relation/edge. The primary key declared below.
	ProvisionedHostTable = "provisioning_step_provisioned_host"
	// ProvisionedHostInverseTable is the table name for the ProvisionedHost entity.
	// It exists in this package in order to avoid circular dependency with the "provisionedhost" package.
	ProvisionedHostInverseTable = "provisioned_hosts"
	// ScriptTable is the table the holds the script relation/edge.
	ScriptTable = "scripts"
	// ScriptInverseTable is the table name for the Script entity.
	// It exists in this package in order to avoid circular dependency with the "script" package.
	ScriptInverseTable = "scripts"
	// ScriptColumn is the table column denoting the script relation/edge.
	ScriptColumn = "provisioning_step_script"
	// CommandTable is the table the holds the command relation/edge.
	CommandTable = "commands"
	// CommandInverseTable is the table name for the Command entity.
	// It exists in this package in order to avoid circular dependency with the "command" package.
	CommandInverseTable = "commands"
	// CommandColumn is the table column denoting the command relation/edge.
	CommandColumn = "provisioning_step_command"
	// DNSRecordTable is the table the holds the dns_record relation/edge.
	DNSRecordTable = "dns_records"
	// DNSRecordInverseTable is the table name for the DNSRecord entity.
	// It exists in this package in order to avoid circular dependency with the "dnsrecord" package.
	DNSRecordInverseTable = "dns_records"
	// DNSRecordColumn is the table column denoting the dns_record relation/edge.
	DNSRecordColumn = "provisioning_step_dns_record"
	// RemoteFileTable is the table the holds the remote_file relation/edge.
	RemoteFileTable = "remote_files"
	// RemoteFileInverseTable is the table name for the RemoteFile entity.
	// It exists in this package in order to avoid circular dependency with the "remotefile" package.
	RemoteFileInverseTable = "remote_files"
	// RemoteFileColumn is the table column denoting the remote_file relation/edge.
	RemoteFileColumn = "provisioning_step_remote_file"
)

// Columns holds all SQL columns for provisioningstep fields.
var Columns = []string{
	FieldID,
	FieldProvisionerType,
	FieldStepNumber,
	FieldStatus,
}

var (
	// ProvisionedHostPrimaryKey and ProvisionedHostColumn2 are the table columns denoting the
	// primary key for the provisioned_host relation (M2M).
	ProvisionedHostPrimaryKey = []string{"provisioning_step_id", "provisioned_host_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}
