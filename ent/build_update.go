// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/gen0cide/laforge/ent/build"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/gen0cide/laforge/ent/provisionednetwork"
	"github.com/gen0cide/laforge/ent/tag"
	"github.com/gen0cide/laforge/ent/team"
	"github.com/gen0cide/laforge/ent/user"
)

// BuildUpdate is the builder for updating Build entities.
type BuildUpdate struct {
	config
	hooks    []Hook
	mutation *BuildMutation
}

// Where adds a new predicate for the builder.
func (bu *BuildUpdate) Where(ps ...predicate.Build) *BuildUpdate {
	bu.mutation.predicates = append(bu.mutation.predicates, ps...)
	return bu
}

// SetRevision sets the revision field.
func (bu *BuildUpdate) SetRevision(i int) *BuildUpdate {
	bu.mutation.ResetRevision()
	bu.mutation.SetRevision(i)
	return bu
}

// AddRevision adds i to revision.
func (bu *BuildUpdate) AddRevision(i int) *BuildUpdate {
	bu.mutation.AddRevision(i)
	return bu
}

// SetConfig sets the config field.
func (bu *BuildUpdate) SetConfig(m map[string]string) *BuildUpdate {
	bu.mutation.SetConfig(m)
	return bu
}

// AddMaintainerIDs adds the maintainer edge to User by ids.
func (bu *BuildUpdate) AddMaintainerIDs(ids ...int) *BuildUpdate {
	bu.mutation.AddMaintainerIDs(ids...)
	return bu
}

// AddMaintainer adds the maintainer edges to User.
func (bu *BuildUpdate) AddMaintainer(u ...*User) *BuildUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return bu.AddMaintainerIDs(ids...)
}

// AddTagIDs adds the tag edge to Tag by ids.
func (bu *BuildUpdate) AddTagIDs(ids ...int) *BuildUpdate {
	bu.mutation.AddTagIDs(ids...)
	return bu
}

// AddTag adds the tag edges to Tag.
func (bu *BuildUpdate) AddTag(t ...*Tag) *BuildUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return bu.AddTagIDs(ids...)
}

// AddTeamIDs adds the team edge to Team by ids.
func (bu *BuildUpdate) AddTeamIDs(ids ...int) *BuildUpdate {
	bu.mutation.AddTeamIDs(ids...)
	return bu
}

// AddTeam adds the team edges to Team.
func (bu *BuildUpdate) AddTeam(t ...*Team) *BuildUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return bu.AddTeamIDs(ids...)
}

// AddProvisionedNetworkToBuildIDs adds the ProvisionedNetworkToBuild edge to ProvisionedNetwork by ids.
func (bu *BuildUpdate) AddProvisionedNetworkToBuildIDs(ids ...int) *BuildUpdate {
	bu.mutation.AddProvisionedNetworkToBuildIDs(ids...)
	return bu
}

// AddProvisionedNetworkToBuild adds the ProvisionedNetworkToBuild edges to ProvisionedNetwork.
func (bu *BuildUpdate) AddProvisionedNetworkToBuild(p ...*ProvisionedNetwork) *BuildUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return bu.AddProvisionedNetworkToBuildIDs(ids...)
}

// Mutation returns the BuildMutation object of the builder.
func (bu *BuildUpdate) Mutation() *BuildMutation {
	return bu.mutation
}

// ClearMaintainer clears all "maintainer" edges to type User.
func (bu *BuildUpdate) ClearMaintainer() *BuildUpdate {
	bu.mutation.ClearMaintainer()
	return bu
}

// RemoveMaintainerIDs removes the maintainer edge to User by ids.
func (bu *BuildUpdate) RemoveMaintainerIDs(ids ...int) *BuildUpdate {
	bu.mutation.RemoveMaintainerIDs(ids...)
	return bu
}

// RemoveMaintainer removes maintainer edges to User.
func (bu *BuildUpdate) RemoveMaintainer(u ...*User) *BuildUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return bu.RemoveMaintainerIDs(ids...)
}

// ClearTag clears all "tag" edges to type Tag.
func (bu *BuildUpdate) ClearTag() *BuildUpdate {
	bu.mutation.ClearTag()
	return bu
}

// RemoveTagIDs removes the tag edge to Tag by ids.
func (bu *BuildUpdate) RemoveTagIDs(ids ...int) *BuildUpdate {
	bu.mutation.RemoveTagIDs(ids...)
	return bu
}

// RemoveTag removes tag edges to Tag.
func (bu *BuildUpdate) RemoveTag(t ...*Tag) *BuildUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return bu.RemoveTagIDs(ids...)
}

// ClearTeam clears all "team" edges to type Team.
func (bu *BuildUpdate) ClearTeam() *BuildUpdate {
	bu.mutation.ClearTeam()
	return bu
}

// RemoveTeamIDs removes the team edge to Team by ids.
func (bu *BuildUpdate) RemoveTeamIDs(ids ...int) *BuildUpdate {
	bu.mutation.RemoveTeamIDs(ids...)
	return bu
}

// RemoveTeam removes team edges to Team.
func (bu *BuildUpdate) RemoveTeam(t ...*Team) *BuildUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return bu.RemoveTeamIDs(ids...)
}

// ClearProvisionedNetworkToBuild clears all "ProvisionedNetworkToBuild" edges to type ProvisionedNetwork.
func (bu *BuildUpdate) ClearProvisionedNetworkToBuild() *BuildUpdate {
	bu.mutation.ClearProvisionedNetworkToBuild()
	return bu
}

// RemoveProvisionedNetworkToBuildIDs removes the ProvisionedNetworkToBuild edge to ProvisionedNetwork by ids.
func (bu *BuildUpdate) RemoveProvisionedNetworkToBuildIDs(ids ...int) *BuildUpdate {
	bu.mutation.RemoveProvisionedNetworkToBuildIDs(ids...)
	return bu
}

// RemoveProvisionedNetworkToBuild removes ProvisionedNetworkToBuild edges to ProvisionedNetwork.
func (bu *BuildUpdate) RemoveProvisionedNetworkToBuild(p ...*ProvisionedNetwork) *BuildUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return bu.RemoveProvisionedNetworkToBuildIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BuildUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(bu.hooks) == 0 {
		if err = bu.check(); err != nil {
			return 0, err
		}
		affected, err = bu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BuildMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bu.check(); err != nil {
				return 0, err
			}
			bu.mutation = mutation
			affected, err = bu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(bu.hooks) - 1; i >= 0; i-- {
			mut = bu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BuildUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BuildUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BuildUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bu *BuildUpdate) check() error {
	if v, ok := bu.mutation.Revision(); ok {
		if err := build.RevisionValidator(v); err != nil {
			return &ValidationError{Name: "revision", err: fmt.Errorf("ent: validator failed for field \"revision\": %w", err)}
		}
	}
	return nil
}

func (bu *BuildUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   build.Table,
			Columns: build.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: build.FieldID,
			},
		},
	}
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.Revision(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: build.FieldRevision,
		})
	}
	if value, ok := bu.mutation.AddedRevision(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: build.FieldRevision,
		})
	}
	if value, ok := bu.mutation.Config(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: build.FieldConfig,
		})
	}
	if bu.mutation.MaintainerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   build.MaintainerTable,
			Columns: []string{build.MaintainerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedMaintainerIDs(); len(nodes) > 0 && !bu.mutation.MaintainerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   build.MaintainerTable,
			Columns: []string{build.MaintainerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.MaintainerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   build.MaintainerTable,
			Columns: []string{build.MaintainerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.TagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   build.TagTable,
			Columns: []string{build.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedTagIDs(); len(nodes) > 0 && !bu.mutation.TagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   build.TagTable,
			Columns: []string{build.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.TagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   build.TagTable,
			Columns: []string{build.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   build.TeamTable,
			Columns: build.TeamPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: team.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedTeamIDs(); len(nodes) > 0 && !bu.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   build.TeamTable,
			Columns: build.TeamPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: team.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   build.TeamTable,
			Columns: build.TeamPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: team.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.ProvisionedNetworkToBuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   build.ProvisionedNetworkToBuildTable,
			Columns: build.ProvisionedNetworkToBuildPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: provisionednetwork.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedProvisionedNetworkToBuildIDs(); len(nodes) > 0 && !bu.mutation.ProvisionedNetworkToBuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   build.ProvisionedNetworkToBuildTable,
			Columns: build.ProvisionedNetworkToBuildPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: provisionednetwork.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.ProvisionedNetworkToBuildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   build.ProvisionedNetworkToBuildTable,
			Columns: build.ProvisionedNetworkToBuildPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: provisionednetwork.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{build.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// BuildUpdateOne is the builder for updating a single Build entity.
type BuildUpdateOne struct {
	config
	hooks    []Hook
	mutation *BuildMutation
}

// SetRevision sets the revision field.
func (buo *BuildUpdateOne) SetRevision(i int) *BuildUpdateOne {
	buo.mutation.ResetRevision()
	buo.mutation.SetRevision(i)
	return buo
}

// AddRevision adds i to revision.
func (buo *BuildUpdateOne) AddRevision(i int) *BuildUpdateOne {
	buo.mutation.AddRevision(i)
	return buo
}

// SetConfig sets the config field.
func (buo *BuildUpdateOne) SetConfig(m map[string]string) *BuildUpdateOne {
	buo.mutation.SetConfig(m)
	return buo
}

// AddMaintainerIDs adds the maintainer edge to User by ids.
func (buo *BuildUpdateOne) AddMaintainerIDs(ids ...int) *BuildUpdateOne {
	buo.mutation.AddMaintainerIDs(ids...)
	return buo
}

// AddMaintainer adds the maintainer edges to User.
func (buo *BuildUpdateOne) AddMaintainer(u ...*User) *BuildUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return buo.AddMaintainerIDs(ids...)
}

// AddTagIDs adds the tag edge to Tag by ids.
func (buo *BuildUpdateOne) AddTagIDs(ids ...int) *BuildUpdateOne {
	buo.mutation.AddTagIDs(ids...)
	return buo
}

// AddTag adds the tag edges to Tag.
func (buo *BuildUpdateOne) AddTag(t ...*Tag) *BuildUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return buo.AddTagIDs(ids...)
}

// AddTeamIDs adds the team edge to Team by ids.
func (buo *BuildUpdateOne) AddTeamIDs(ids ...int) *BuildUpdateOne {
	buo.mutation.AddTeamIDs(ids...)
	return buo
}

// AddTeam adds the team edges to Team.
func (buo *BuildUpdateOne) AddTeam(t ...*Team) *BuildUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return buo.AddTeamIDs(ids...)
}

// AddProvisionedNetworkToBuildIDs adds the ProvisionedNetworkToBuild edge to ProvisionedNetwork by ids.
func (buo *BuildUpdateOne) AddProvisionedNetworkToBuildIDs(ids ...int) *BuildUpdateOne {
	buo.mutation.AddProvisionedNetworkToBuildIDs(ids...)
	return buo
}

// AddProvisionedNetworkToBuild adds the ProvisionedNetworkToBuild edges to ProvisionedNetwork.
func (buo *BuildUpdateOne) AddProvisionedNetworkToBuild(p ...*ProvisionedNetwork) *BuildUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return buo.AddProvisionedNetworkToBuildIDs(ids...)
}

// Mutation returns the BuildMutation object of the builder.
func (buo *BuildUpdateOne) Mutation() *BuildMutation {
	return buo.mutation
}

// ClearMaintainer clears all "maintainer" edges to type User.
func (buo *BuildUpdateOne) ClearMaintainer() *BuildUpdateOne {
	buo.mutation.ClearMaintainer()
	return buo
}

// RemoveMaintainerIDs removes the maintainer edge to User by ids.
func (buo *BuildUpdateOne) RemoveMaintainerIDs(ids ...int) *BuildUpdateOne {
	buo.mutation.RemoveMaintainerIDs(ids...)
	return buo
}

// RemoveMaintainer removes maintainer edges to User.
func (buo *BuildUpdateOne) RemoveMaintainer(u ...*User) *BuildUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return buo.RemoveMaintainerIDs(ids...)
}

// ClearTag clears all "tag" edges to type Tag.
func (buo *BuildUpdateOne) ClearTag() *BuildUpdateOne {
	buo.mutation.ClearTag()
	return buo
}

// RemoveTagIDs removes the tag edge to Tag by ids.
func (buo *BuildUpdateOne) RemoveTagIDs(ids ...int) *BuildUpdateOne {
	buo.mutation.RemoveTagIDs(ids...)
	return buo
}

// RemoveTag removes tag edges to Tag.
func (buo *BuildUpdateOne) RemoveTag(t ...*Tag) *BuildUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return buo.RemoveTagIDs(ids...)
}

// ClearTeam clears all "team" edges to type Team.
func (buo *BuildUpdateOne) ClearTeam() *BuildUpdateOne {
	buo.mutation.ClearTeam()
	return buo
}

// RemoveTeamIDs removes the team edge to Team by ids.
func (buo *BuildUpdateOne) RemoveTeamIDs(ids ...int) *BuildUpdateOne {
	buo.mutation.RemoveTeamIDs(ids...)
	return buo
}

// RemoveTeam removes team edges to Team.
func (buo *BuildUpdateOne) RemoveTeam(t ...*Team) *BuildUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return buo.RemoveTeamIDs(ids...)
}

// ClearProvisionedNetworkToBuild clears all "ProvisionedNetworkToBuild" edges to type ProvisionedNetwork.
func (buo *BuildUpdateOne) ClearProvisionedNetworkToBuild() *BuildUpdateOne {
	buo.mutation.ClearProvisionedNetworkToBuild()
	return buo
}

// RemoveProvisionedNetworkToBuildIDs removes the ProvisionedNetworkToBuild edge to ProvisionedNetwork by ids.
func (buo *BuildUpdateOne) RemoveProvisionedNetworkToBuildIDs(ids ...int) *BuildUpdateOne {
	buo.mutation.RemoveProvisionedNetworkToBuildIDs(ids...)
	return buo
}

// RemoveProvisionedNetworkToBuild removes ProvisionedNetworkToBuild edges to ProvisionedNetwork.
func (buo *BuildUpdateOne) RemoveProvisionedNetworkToBuild(p ...*ProvisionedNetwork) *BuildUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return buo.RemoveProvisionedNetworkToBuildIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (buo *BuildUpdateOne) Save(ctx context.Context) (*Build, error) {
	var (
		err  error
		node *Build
	)
	if len(buo.hooks) == 0 {
		if err = buo.check(); err != nil {
			return nil, err
		}
		node, err = buo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BuildMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = buo.check(); err != nil {
				return nil, err
			}
			buo.mutation = mutation
			node, err = buo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(buo.hooks) - 1; i >= 0; i-- {
			mut = buo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, buo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BuildUpdateOne) SaveX(ctx context.Context) *Build {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BuildUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BuildUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buo *BuildUpdateOne) check() error {
	if v, ok := buo.mutation.Revision(); ok {
		if err := build.RevisionValidator(v); err != nil {
			return &ValidationError{Name: "revision", err: fmt.Errorf("ent: validator failed for field \"revision\": %w", err)}
		}
	}
	return nil
}

func (buo *BuildUpdateOne) sqlSave(ctx context.Context) (_node *Build, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   build.Table,
			Columns: build.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: build.FieldID,
			},
		},
	}
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Build.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := buo.mutation.Revision(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: build.FieldRevision,
		})
	}
	if value, ok := buo.mutation.AddedRevision(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: build.FieldRevision,
		})
	}
	if value, ok := buo.mutation.Config(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: build.FieldConfig,
		})
	}
	if buo.mutation.MaintainerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   build.MaintainerTable,
			Columns: []string{build.MaintainerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedMaintainerIDs(); len(nodes) > 0 && !buo.mutation.MaintainerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   build.MaintainerTable,
			Columns: []string{build.MaintainerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.MaintainerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   build.MaintainerTable,
			Columns: []string{build.MaintainerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.TagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   build.TagTable,
			Columns: []string{build.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedTagIDs(); len(nodes) > 0 && !buo.mutation.TagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   build.TagTable,
			Columns: []string{build.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.TagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   build.TagTable,
			Columns: []string{build.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   build.TeamTable,
			Columns: build.TeamPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: team.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedTeamIDs(); len(nodes) > 0 && !buo.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   build.TeamTable,
			Columns: build.TeamPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: team.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   build.TeamTable,
			Columns: build.TeamPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: team.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.ProvisionedNetworkToBuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   build.ProvisionedNetworkToBuildTable,
			Columns: build.ProvisionedNetworkToBuildPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: provisionednetwork.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedProvisionedNetworkToBuildIDs(); len(nodes) > 0 && !buo.mutation.ProvisionedNetworkToBuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   build.ProvisionedNetworkToBuildTable,
			Columns: build.ProvisionedNetworkToBuildPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: provisionednetwork.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.ProvisionedNetworkToBuildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   build.ProvisionedNetworkToBuildTable,
			Columns: build.ProvisionedNetworkToBuildPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: provisionednetwork.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Build{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{build.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
