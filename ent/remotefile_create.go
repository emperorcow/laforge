// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/gen0cide/laforge/ent/remotefile"
	"github.com/gen0cide/laforge/ent/tag"
)

// RemoteFileCreate is the builder for creating a RemoteFile entity.
type RemoteFileCreate struct {
	config
	mutation *RemoteFileMutation
	hooks    []Hook
}

// SetSourceType sets the source_type field.
func (rfc *RemoteFileCreate) SetSourceType(s string) *RemoteFileCreate {
	rfc.mutation.SetSourceType(s)
	return rfc
}

// SetSource sets the source field.
func (rfc *RemoteFileCreate) SetSource(s string) *RemoteFileCreate {
	rfc.mutation.SetSource(s)
	return rfc
}

// SetDestination sets the destination field.
func (rfc *RemoteFileCreate) SetDestination(s string) *RemoteFileCreate {
	rfc.mutation.SetDestination(s)
	return rfc
}

// SetVars sets the vars field.
func (rfc *RemoteFileCreate) SetVars(m map[string]string) *RemoteFileCreate {
	rfc.mutation.SetVars(m)
	return rfc
}

// SetTemplate sets the template field.
func (rfc *RemoteFileCreate) SetTemplate(b bool) *RemoteFileCreate {
	rfc.mutation.SetTemplate(b)
	return rfc
}

// SetPerms sets the perms field.
func (rfc *RemoteFileCreate) SetPerms(s string) *RemoteFileCreate {
	rfc.mutation.SetPerms(s)
	return rfc
}

// SetDisabled sets the disabled field.
func (rfc *RemoteFileCreate) SetDisabled(b bool) *RemoteFileCreate {
	rfc.mutation.SetDisabled(b)
	return rfc
}

// SetMd5 sets the md5 field.
func (rfc *RemoteFileCreate) SetMd5(s string) *RemoteFileCreate {
	rfc.mutation.SetMd5(s)
	return rfc
}

// SetAbsPath sets the abs_path field.
func (rfc *RemoteFileCreate) SetAbsPath(s string) *RemoteFileCreate {
	rfc.mutation.SetAbsPath(s)
	return rfc
}

// SetExt sets the ext field.
func (rfc *RemoteFileCreate) SetExt(s string) *RemoteFileCreate {
	rfc.mutation.SetExt(s)
	return rfc
}

// AddTagIDs adds the tag edge to Tag by ids.
func (rfc *RemoteFileCreate) AddTagIDs(ids ...int) *RemoteFileCreate {
	rfc.mutation.AddTagIDs(ids...)
	return rfc
}

// AddTag adds the tag edges to Tag.
func (rfc *RemoteFileCreate) AddTag(t ...*Tag) *RemoteFileCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return rfc.AddTagIDs(ids...)
}

// Mutation returns the RemoteFileMutation object of the builder.
func (rfc *RemoteFileCreate) Mutation() *RemoteFileMutation {
	return rfc.mutation
}

// Save creates the RemoteFile in the database.
func (rfc *RemoteFileCreate) Save(ctx context.Context) (*RemoteFile, error) {
	var (
		err  error
		node *RemoteFile
	)
	if len(rfc.hooks) == 0 {
		if err = rfc.check(); err != nil {
			return nil, err
		}
		node, err = rfc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RemoteFileMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rfc.check(); err != nil {
				return nil, err
			}
			rfc.mutation = mutation
			node, err = rfc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rfc.hooks) - 1; i >= 0; i-- {
			mut = rfc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rfc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rfc *RemoteFileCreate) SaveX(ctx context.Context) *RemoteFile {
	v, err := rfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (rfc *RemoteFileCreate) check() error {
	if _, ok := rfc.mutation.SourceType(); !ok {
		return &ValidationError{Name: "source_type", err: errors.New("ent: missing required field \"source_type\"")}
	}
	if _, ok := rfc.mutation.Source(); !ok {
		return &ValidationError{Name: "source", err: errors.New("ent: missing required field \"source\"")}
	}
	if _, ok := rfc.mutation.Destination(); !ok {
		return &ValidationError{Name: "destination", err: errors.New("ent: missing required field \"destination\"")}
	}
	if _, ok := rfc.mutation.Vars(); !ok {
		return &ValidationError{Name: "vars", err: errors.New("ent: missing required field \"vars\"")}
	}
	if _, ok := rfc.mutation.Template(); !ok {
		return &ValidationError{Name: "template", err: errors.New("ent: missing required field \"template\"")}
	}
	if _, ok := rfc.mutation.Perms(); !ok {
		return &ValidationError{Name: "perms", err: errors.New("ent: missing required field \"perms\"")}
	}
	if _, ok := rfc.mutation.Disabled(); !ok {
		return &ValidationError{Name: "disabled", err: errors.New("ent: missing required field \"disabled\"")}
	}
	if _, ok := rfc.mutation.Md5(); !ok {
		return &ValidationError{Name: "md5", err: errors.New("ent: missing required field \"md5\"")}
	}
	if _, ok := rfc.mutation.AbsPath(); !ok {
		return &ValidationError{Name: "abs_path", err: errors.New("ent: missing required field \"abs_path\"")}
	}
	if _, ok := rfc.mutation.Ext(); !ok {
		return &ValidationError{Name: "ext", err: errors.New("ent: missing required field \"ext\"")}
	}
	return nil
}

func (rfc *RemoteFileCreate) sqlSave(ctx context.Context) (*RemoteFile, error) {
	_node, _spec := rfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rfc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (rfc *RemoteFileCreate) createSpec() (*RemoteFile, *sqlgraph.CreateSpec) {
	var (
		_node = &RemoteFile{config: rfc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: remotefile.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: remotefile.FieldID,
			},
		}
	)
	if value, ok := rfc.mutation.SourceType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: remotefile.FieldSourceType,
		})
		_node.SourceType = value
	}
	if value, ok := rfc.mutation.Source(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: remotefile.FieldSource,
		})
		_node.Source = value
	}
	if value, ok := rfc.mutation.Destination(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: remotefile.FieldDestination,
		})
		_node.Destination = value
	}
	if value, ok := rfc.mutation.Vars(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: remotefile.FieldVars,
		})
		_node.Vars = value
	}
	if value, ok := rfc.mutation.Template(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: remotefile.FieldTemplate,
		})
		_node.Template = value
	}
	if value, ok := rfc.mutation.Perms(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: remotefile.FieldPerms,
		})
		_node.Perms = value
	}
	if value, ok := rfc.mutation.Disabled(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: remotefile.FieldDisabled,
		})
		_node.Disabled = value
	}
	if value, ok := rfc.mutation.Md5(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: remotefile.FieldMd5,
		})
		_node.Md5 = value
	}
	if value, ok := rfc.mutation.AbsPath(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: remotefile.FieldAbsPath,
		})
		_node.AbsPath = value
	}
	if value, ok := rfc.mutation.Ext(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: remotefile.FieldExt,
		})
		_node.Ext = value
	}
	if nodes := rfc.mutation.TagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   remotefile.TagTable,
			Columns: []string{remotefile.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RemoteFileCreateBulk is the builder for creating a bulk of RemoteFile entities.
type RemoteFileCreateBulk struct {
	config
	builders []*RemoteFileCreate
}

// Save creates the RemoteFile entities in the database.
func (rfcb *RemoteFileCreateBulk) Save(ctx context.Context) ([]*RemoteFile, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rfcb.builders))
	nodes := make([]*RemoteFile, len(rfcb.builders))
	mutators := make([]Mutator, len(rfcb.builders))
	for i := range rfcb.builders {
		func(i int, root context.Context) {
			builder := rfcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RemoteFileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rfcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rfcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (rfcb *RemoteFileCreateBulk) SaveX(ctx context.Context) []*RemoteFile {
	v, err := rfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
