// Code generated by entc, DO NOT EDIT.

package remotefile

const (
	// Label holds the string label denoting the remotefile type in the database.
	Label = "remote_file"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSourceType holds the string denoting the source_type field in the database.
	FieldSourceType = "source_type"
	// FieldSource holds the string denoting the source field in the database.
	FieldSource = "source"
	// FieldDestination holds the string denoting the destination field in the database.
	FieldDestination = "destination"
	// FieldVars holds the string denoting the vars field in the database.
	FieldVars = "vars"
	// FieldTemplate holds the string denoting the template field in the database.
	FieldTemplate = "template"
	// FieldPerms holds the string denoting the perms field in the database.
	FieldPerms = "perms"
	// FieldDisabled holds the string denoting the disabled field in the database.
	FieldDisabled = "disabled"
	// FieldMd5 holds the string denoting the md5 field in the database.
	FieldMd5 = "md5"
	// FieldAbsPath holds the string denoting the abs_path field in the database.
	FieldAbsPath = "abs_path"
	// FieldExt holds the string denoting the ext field in the database.
	FieldExt = "ext"

	// EdgeTag holds the string denoting the tag edge name in mutations.
	EdgeTag = "tag"

	// Table holds the table name of the remotefile in the database.
	Table = "remote_files"
	// TagTable is the table the holds the tag relation/edge.
	TagTable = "tags"
	// TagInverseTable is the table name for the Tag entity.
	// It exists in this package in order to avoid circular dependency with the "tag" package.
	TagInverseTable = "tags"
	// TagColumn is the table column denoting the tag relation/edge.
	TagColumn = "remote_file_tag"
)

// Columns holds all SQL columns for remotefile fields.
var Columns = []string{
	FieldID,
	FieldSourceType,
	FieldSource,
	FieldDestination,
	FieldVars,
	FieldTemplate,
	FieldPerms,
	FieldDisabled,
	FieldMd5,
	FieldAbsPath,
	FieldExt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the RemoteFile type.
var ForeignKeys = []string{
	"provisioning_step_remote_file",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
