// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
	"github.com/gen0cide/laforge/ent/disk"
)

// Disk is the model entity for the Disk schema.
type Disk struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Size holds the value of the "size" field.
	Size int `json:"size,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DiskQuery when eager-loading is set.
	Edges     DiskEdges `json:"edges"`
	host_disk *int
}

// DiskEdges holds the relations/edges for other nodes in the graph.
type DiskEdges struct {
	// Tag holds the value of the tag edge.
	Tag []*Tag
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TagOrErr returns the Tag value or an error if the edge
// was not loaded in eager-loading.
func (e DiskEdges) TagOrErr() ([]*Tag, error) {
	if e.loadedTypes[0] {
		return e.Tag, nil
	}
	return nil, &NotLoadedError{edge: "tag"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Disk) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&sql.NullInt64{}, // size
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Disk) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // host_disk
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Disk fields.
func (d *Disk) assignValues(values ...interface{}) error {
	if m, n := len(values), len(disk.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	d.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field size", values[0])
	} else if value.Valid {
		d.Size = int(value.Int64)
	}
	values = values[1:]
	if len(values) == len(disk.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field host_disk", value)
		} else if value.Valid {
			d.host_disk = new(int)
			*d.host_disk = int(value.Int64)
		}
	}
	return nil
}

// QueryTag queries the tag edge of the Disk.
func (d *Disk) QueryTag() *TagQuery {
	return (&DiskClient{config: d.config}).QueryTag(d)
}

// Update returns a builder for updating this Disk.
// Note that, you need to call Disk.Unwrap() before calling this method, if this Disk
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Disk) Update() *DiskUpdateOne {
	return (&DiskClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (d *Disk) Unwrap() *Disk {
	tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Disk is not a transactional entity")
	}
	d.config.driver = tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Disk) String() string {
	var builder strings.Builder
	builder.WriteString("Disk(")
	builder.WriteString(fmt.Sprintf("id=%v", d.ID))
	builder.WriteString(", size=")
	builder.WriteString(fmt.Sprintf("%v", d.Size))
	builder.WriteByte(')')
	return builder.String()
}

// Disks is a parsable slice of Disk.
type Disks []*Disk

func (d Disks) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}
