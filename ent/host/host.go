// Code generated by entc, DO NOT EDIT.

package host

const (
	// Label holds the string label denoting the host type in the database.
	Label = "host"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldHostname holds the string denoting the hostname field in the database.
	FieldHostname = "hostname"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldOS holds the string denoting the os field in the database.
	FieldOS = "os"
	// FieldLastOctet holds the string denoting the last_octet field in the database.
	FieldLastOctet = "last_octet"
	// FieldAllowMACChanges holds the string denoting the allow_mac_changes field in the database.
	FieldAllowMACChanges = "allow_mac_changes"
	// FieldExposedTCPPorts holds the string denoting the exposed_tcp_ports field in the database.
	FieldExposedTCPPorts = "exposed_tcp_ports"
	// FieldExposedUDPPorts holds the string denoting the exposed_udp_ports field in the database.
	FieldExposedUDPPorts = "exposed_udp_ports"
	// FieldOverridePassword holds the string denoting the override_password field in the database.
	FieldOverridePassword = "override_password"
	// FieldVars holds the string denoting the vars field in the database.
	FieldVars = "vars"
	// FieldUserGroups holds the string denoting the user_groups field in the database.
	FieldUserGroups = "user_groups"
	// FieldDependsOn holds the string denoting the depends_on field in the database.
	FieldDependsOn = "depends_on"
	// FieldScripts holds the string denoting the scripts field in the database.
	FieldScripts = "scripts"
	// FieldCommands holds the string denoting the commands field in the database.
	FieldCommands = "commands"
	// FieldRemoteFiles holds the string denoting the remote_files field in the database.
	FieldRemoteFiles = "remote_files"
	// FieldDNSRecords holds the string denoting the dns_records field in the database.
	FieldDNSRecords = "dns_records"

	// EdgeDisk holds the string denoting the disk edge name in mutations.
	EdgeDisk = "disk"
	// EdgeMaintainer holds the string denoting the maintainer edge name in mutations.
	EdgeMaintainer = "maintainer"
	// EdgeTag holds the string denoting the tag edge name in mutations.
	EdgeTag = "tag"

	// Table holds the table name of the host in the database.
	Table = "hosts"
	// DiskTable is the table the holds the disk relation/edge.
	DiskTable = "disks"
	// DiskInverseTable is the table name for the Disk entity.
	// It exists in this package in order to avoid circular dependency with the "disk" package.
	DiskInverseTable = "disks"
	// DiskColumn is the table column denoting the disk relation/edge.
	DiskColumn = "host_disk"
	// MaintainerTable is the table the holds the maintainer relation/edge.
	MaintainerTable = "users"
	// MaintainerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	MaintainerInverseTable = "users"
	// MaintainerColumn is the table column denoting the maintainer relation/edge.
	MaintainerColumn = "host_maintainer"
	// TagTable is the table the holds the tag relation/edge.
	TagTable = "tags"
	// TagInverseTable is the table name for the Tag entity.
	// It exists in this package in order to avoid circular dependency with the "tag" package.
	TagInverseTable = "tags"
	// TagColumn is the table column denoting the tag relation/edge.
	TagColumn = "host_tag"
)

// Columns holds all SQL columns for host fields.
var Columns = []string{
	FieldID,
	FieldHostname,
	FieldDescription,
	FieldOS,
	FieldLastOctet,
	FieldAllowMACChanges,
	FieldExposedTCPPorts,
	FieldExposedUDPPorts,
	FieldOverridePassword,
	FieldVars,
	FieldUserGroups,
	FieldDependsOn,
	FieldScripts,
	FieldCommands,
	FieldRemoteFiles,
	FieldDNSRecords,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the Host type.
var ForeignKeys = []string{
	"environment_host",
	"finding_host",
	"provisioned_host_host",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
