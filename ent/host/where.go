// Code generated by entc, DO NOT EDIT.

package host

import (
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/gen0cide/laforge/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Hostname applies equality check predicate on the "hostname" field. It's identical to HostnameEQ.
func Hostname(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHostname), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// OS applies equality check predicate on the "OS" field. It's identical to OSEQ.
func OS(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOS), v))
	})
}

// LastOctet applies equality check predicate on the "last_octet" field. It's identical to LastOctetEQ.
func LastOctet(v int) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastOctet), v))
	})
}

// AllowMACChanges applies equality check predicate on the "allow_mac_changes" field. It's identical to AllowMACChangesEQ.
func AllowMACChanges(v bool) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAllowMACChanges), v))
	})
}

// OverridePassword applies equality check predicate on the "override_password" field. It's identical to OverridePasswordEQ.
func OverridePassword(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOverridePassword), v))
	})
}

// HostnameEQ applies the EQ predicate on the "hostname" field.
func HostnameEQ(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHostname), v))
	})
}

// HostnameNEQ applies the NEQ predicate on the "hostname" field.
func HostnameNEQ(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHostname), v))
	})
}

// HostnameIn applies the In predicate on the "hostname" field.
func HostnameIn(vs ...string) predicate.Host {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Host(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldHostname), v...))
	})
}

// HostnameNotIn applies the NotIn predicate on the "hostname" field.
func HostnameNotIn(vs ...string) predicate.Host {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Host(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldHostname), v...))
	})
}

// HostnameGT applies the GT predicate on the "hostname" field.
func HostnameGT(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHostname), v))
	})
}

// HostnameGTE applies the GTE predicate on the "hostname" field.
func HostnameGTE(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHostname), v))
	})
}

// HostnameLT applies the LT predicate on the "hostname" field.
func HostnameLT(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHostname), v))
	})
}

// HostnameLTE applies the LTE predicate on the "hostname" field.
func HostnameLTE(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHostname), v))
	})
}

// HostnameContains applies the Contains predicate on the "hostname" field.
func HostnameContains(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHostname), v))
	})
}

// HostnameHasPrefix applies the HasPrefix predicate on the "hostname" field.
func HostnameHasPrefix(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHostname), v))
	})
}

// HostnameHasSuffix applies the HasSuffix predicate on the "hostname" field.
func HostnameHasSuffix(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHostname), v))
	})
}

// HostnameEqualFold applies the EqualFold predicate on the "hostname" field.
func HostnameEqualFold(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHostname), v))
	})
}

// HostnameContainsFold applies the ContainsFold predicate on the "hostname" field.
func HostnameContainsFold(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHostname), v))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Host {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Host(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Host {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Host(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// OSEQ applies the EQ predicate on the "OS" field.
func OSEQ(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOS), v))
	})
}

// OSNEQ applies the NEQ predicate on the "OS" field.
func OSNEQ(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOS), v))
	})
}

// OSIn applies the In predicate on the "OS" field.
func OSIn(vs ...string) predicate.Host {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Host(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOS), v...))
	})
}

// OSNotIn applies the NotIn predicate on the "OS" field.
func OSNotIn(vs ...string) predicate.Host {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Host(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOS), v...))
	})
}

// OSGT applies the GT predicate on the "OS" field.
func OSGT(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOS), v))
	})
}

// OSGTE applies the GTE predicate on the "OS" field.
func OSGTE(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOS), v))
	})
}

// OSLT applies the LT predicate on the "OS" field.
func OSLT(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOS), v))
	})
}

// OSLTE applies the LTE predicate on the "OS" field.
func OSLTE(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOS), v))
	})
}

// OSContains applies the Contains predicate on the "OS" field.
func OSContains(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOS), v))
	})
}

// OSHasPrefix applies the HasPrefix predicate on the "OS" field.
func OSHasPrefix(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOS), v))
	})
}

// OSHasSuffix applies the HasSuffix predicate on the "OS" field.
func OSHasSuffix(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOS), v))
	})
}

// OSEqualFold applies the EqualFold predicate on the "OS" field.
func OSEqualFold(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOS), v))
	})
}

// OSContainsFold applies the ContainsFold predicate on the "OS" field.
func OSContainsFold(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOS), v))
	})
}

// LastOctetEQ applies the EQ predicate on the "last_octet" field.
func LastOctetEQ(v int) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastOctet), v))
	})
}

// LastOctetNEQ applies the NEQ predicate on the "last_octet" field.
func LastOctetNEQ(v int) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastOctet), v))
	})
}

// LastOctetIn applies the In predicate on the "last_octet" field.
func LastOctetIn(vs ...int) predicate.Host {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Host(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLastOctet), v...))
	})
}

// LastOctetNotIn applies the NotIn predicate on the "last_octet" field.
func LastOctetNotIn(vs ...int) predicate.Host {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Host(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLastOctet), v...))
	})
}

// LastOctetGT applies the GT predicate on the "last_octet" field.
func LastOctetGT(v int) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastOctet), v))
	})
}

// LastOctetGTE applies the GTE predicate on the "last_octet" field.
func LastOctetGTE(v int) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastOctet), v))
	})
}

// LastOctetLT applies the LT predicate on the "last_octet" field.
func LastOctetLT(v int) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastOctet), v))
	})
}

// LastOctetLTE applies the LTE predicate on the "last_octet" field.
func LastOctetLTE(v int) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastOctet), v))
	})
}

// AllowMACChangesEQ applies the EQ predicate on the "allow_mac_changes" field.
func AllowMACChangesEQ(v bool) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAllowMACChanges), v))
	})
}

// AllowMACChangesNEQ applies the NEQ predicate on the "allow_mac_changes" field.
func AllowMACChangesNEQ(v bool) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAllowMACChanges), v))
	})
}

// OverridePasswordEQ applies the EQ predicate on the "override_password" field.
func OverridePasswordEQ(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOverridePassword), v))
	})
}

// OverridePasswordNEQ applies the NEQ predicate on the "override_password" field.
func OverridePasswordNEQ(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOverridePassword), v))
	})
}

// OverridePasswordIn applies the In predicate on the "override_password" field.
func OverridePasswordIn(vs ...string) predicate.Host {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Host(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOverridePassword), v...))
	})
}

// OverridePasswordNotIn applies the NotIn predicate on the "override_password" field.
func OverridePasswordNotIn(vs ...string) predicate.Host {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Host(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOverridePassword), v...))
	})
}

// OverridePasswordGT applies the GT predicate on the "override_password" field.
func OverridePasswordGT(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOverridePassword), v))
	})
}

// OverridePasswordGTE applies the GTE predicate on the "override_password" field.
func OverridePasswordGTE(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOverridePassword), v))
	})
}

// OverridePasswordLT applies the LT predicate on the "override_password" field.
func OverridePasswordLT(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOverridePassword), v))
	})
}

// OverridePasswordLTE applies the LTE predicate on the "override_password" field.
func OverridePasswordLTE(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOverridePassword), v))
	})
}

// OverridePasswordContains applies the Contains predicate on the "override_password" field.
func OverridePasswordContains(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOverridePassword), v))
	})
}

// OverridePasswordHasPrefix applies the HasPrefix predicate on the "override_password" field.
func OverridePasswordHasPrefix(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOverridePassword), v))
	})
}

// OverridePasswordHasSuffix applies the HasSuffix predicate on the "override_password" field.
func OverridePasswordHasSuffix(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOverridePassword), v))
	})
}

// OverridePasswordEqualFold applies the EqualFold predicate on the "override_password" field.
func OverridePasswordEqualFold(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOverridePassword), v))
	})
}

// OverridePasswordContainsFold applies the ContainsFold predicate on the "override_password" field.
func OverridePasswordContainsFold(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOverridePassword), v))
	})
}

// DependsOnIsNil applies the IsNil predicate on the "depends_on" field.
func DependsOnIsNil() predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDependsOn)))
	})
}

// DependsOnNotNil applies the NotNil predicate on the "depends_on" field.
func DependsOnNotNil() predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDependsOn)))
	})
}

// ScriptsIsNil applies the IsNil predicate on the "scripts" field.
func ScriptsIsNil() predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldScripts)))
	})
}

// ScriptsNotNil applies the NotNil predicate on the "scripts" field.
func ScriptsNotNil() predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldScripts)))
	})
}

// CommandsIsNil applies the IsNil predicate on the "commands" field.
func CommandsIsNil() predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCommands)))
	})
}

// CommandsNotNil applies the NotNil predicate on the "commands" field.
func CommandsNotNil() predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCommands)))
	})
}

// RemoteFilesIsNil applies the IsNil predicate on the "remote_files" field.
func RemoteFilesIsNil() predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRemoteFiles)))
	})
}

// RemoteFilesNotNil applies the NotNil predicate on the "remote_files" field.
func RemoteFilesNotNil() predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRemoteFiles)))
	})
}

// DNSRecordsIsNil applies the IsNil predicate on the "dns_records" field.
func DNSRecordsIsNil() predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDNSRecords)))
	})
}

// DNSRecordsNotNil applies the NotNil predicate on the "dns_records" field.
func DNSRecordsNotNil() predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDNSRecords)))
	})
}

// HasDisk applies the HasEdge predicate on the "disk" edge.
func HasDisk() predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DiskTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DiskTable, DiskColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDiskWith applies the HasEdge predicate on the "disk" edge with a given conditions (other predicates).
func HasDiskWith(preds ...predicate.Disk) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DiskInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DiskTable, DiskColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMaintainer applies the HasEdge predicate on the "maintainer" edge.
func HasMaintainer() predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MaintainerTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MaintainerTable, MaintainerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMaintainerWith applies the HasEdge predicate on the "maintainer" edge with a given conditions (other predicates).
func HasMaintainerWith(preds ...predicate.User) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MaintainerInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MaintainerTable, MaintainerColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTag applies the HasEdge predicate on the "tag" edge.
func HasTag() predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TagTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TagTable, TagColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTagWith applies the HasEdge predicate on the "tag" edge with a given conditions (other predicates).
func HasTagWith(preds ...predicate.Tag) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TagInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TagTable, TagColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Host) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Host) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Host) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		p(s.Not())
	})
}
