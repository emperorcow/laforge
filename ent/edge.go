// Code generated by entc, DO NOT EDIT.

package ent

import "context"

func (b *Build) Maintainer(ctx context.Context) ([]*User, error) {
	result, err := b.Edges.MaintainerOrErr()
	if IsNotLoaded(err) {
		result, err = b.QueryMaintainer().All(ctx)
	}
	return result, err
}

func (b *Build) Tag(ctx context.Context) ([]*Tag, error) {
	result, err := b.Edges.TagOrErr()
	if IsNotLoaded(err) {
		result, err = b.QueryTag().All(ctx)
	}
	return result, err
}

func (b *Build) Team(ctx context.Context) ([]*Team, error) {
	result, err := b.Edges.TeamOrErr()
	if IsNotLoaded(err) {
		result, err = b.QueryTeam().All(ctx)
	}
	return result, err
}

func (b *Build) ProvisionedNetworkToBuild(ctx context.Context) ([]*ProvisionedNetwork, error) {
	result, err := b.Edges.ProvisionedNetworkToBuildOrErr()
	if IsNotLoaded(err) {
		result, err = b.QueryProvisionedNetworkToBuild().All(ctx)
	}
	return result, err
}

func (c *Command) User(ctx context.Context) ([]*User, error) {
	result, err := c.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryUser().All(ctx)
	}
	return result, err
}

func (c *Command) Tag(ctx context.Context) ([]*Tag, error) {
	result, err := c.Edges.TagOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryTag().All(ctx)
	}
	return result, err
}

func (c *Competition) DNS(ctx context.Context) ([]*DNS, error) {
	result, err := c.Edges.DNSOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryDNS().All(ctx)
	}
	return result, err
}

func (dr *DNSRecord) Tag(ctx context.Context) ([]*Tag, error) {
	result, err := dr.Edges.TagOrErr()
	if IsNotLoaded(err) {
		result, err = dr.QueryTag().All(ctx)
	}
	return result, err
}

func (d *Disk) Tag(ctx context.Context) ([]*Tag, error) {
	result, err := d.Edges.TagOrErr()
	if IsNotLoaded(err) {
		result, err = d.QueryTag().All(ctx)
	}
	return result, err
}

func (e *Environment) Tag(ctx context.Context) ([]*Tag, error) {
	result, err := e.Edges.TagOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryTag().All(ctx)
	}
	return result, err
}

func (e *Environment) User(ctx context.Context) ([]*User, error) {
	result, err := e.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryUser().All(ctx)
	}
	return result, err
}

func (e *Environment) Host(ctx context.Context) ([]*Host, error) {
	result, err := e.Edges.HostOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryHost().All(ctx)
	}
	return result, err
}

func (e *Environment) Competition(ctx context.Context) ([]*Competition, error) {
	result, err := e.Edges.CompetitionOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryCompetition().All(ctx)
	}
	return result, err
}

func (e *Environment) Build(ctx context.Context) ([]*Build, error) {
	result, err := e.Edges.BuildOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryBuild().All(ctx)
	}
	return result, err
}

func (e *Environment) IncludedNetwork(ctx context.Context) ([]*IncludedNetwork, error) {
	result, err := e.Edges.IncludedNetworkOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryIncludedNetwork().All(ctx)
	}
	return result, err
}

func (e *Environment) Network(ctx context.Context) ([]*Network, error) {
	result, err := e.Edges.NetworkOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryNetwork().All(ctx)
	}
	return result, err
}

func (e *Environment) Team(ctx context.Context) ([]*Team, error) {
	result, err := e.Edges.TeamOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryTeam().All(ctx)
	}
	return result, err
}

func (fd *FileDelete) Tag(ctx context.Context) ([]*Tag, error) {
	result, err := fd.Edges.TagOrErr()
	if IsNotLoaded(err) {
		result, err = fd.QueryTag().All(ctx)
	}
	return result, err
}

func (fd *FileDownload) Tag(ctx context.Context) ([]*Tag, error) {
	result, err := fd.Edges.TagOrErr()
	if IsNotLoaded(err) {
		result, err = fd.QueryTag().All(ctx)
	}
	return result, err
}

func (fe *FileExtract) Tag(ctx context.Context) ([]*Tag, error) {
	result, err := fe.Edges.TagOrErr()
	if IsNotLoaded(err) {
		result, err = fe.QueryTag().All(ctx)
	}
	return result, err
}

func (f *Finding) User(ctx context.Context) ([]*User, error) {
	result, err := f.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = f.QueryUser().All(ctx)
	}
	return result, err
}

func (f *Finding) Tag(ctx context.Context) ([]*Tag, error) {
	result, err := f.Edges.TagOrErr()
	if IsNotLoaded(err) {
		result, err = f.QueryTag().All(ctx)
	}
	return result, err
}

func (f *Finding) Host(ctx context.Context) ([]*Host, error) {
	result, err := f.Edges.HostOrErr()
	if IsNotLoaded(err) {
		result, err = f.QueryHost().All(ctx)
	}
	return result, err
}

func (f *Finding) Script(ctx context.Context) ([]*Script, error) {
	result, err := f.Edges.ScriptOrErr()
	if IsNotLoaded(err) {
		result, err = f.QueryScript().All(ctx)
	}
	return result, err
}

func (h *Host) Disk(ctx context.Context) ([]*Disk, error) {
	result, err := h.Edges.DiskOrErr()
	if IsNotLoaded(err) {
		result, err = h.QueryDisk().All(ctx)
	}
	return result, err
}

func (h *Host) Maintainer(ctx context.Context) ([]*User, error) {
	result, err := h.Edges.MaintainerOrErr()
	if IsNotLoaded(err) {
		result, err = h.QueryMaintainer().All(ctx)
	}
	return result, err
}

func (h *Host) Tag(ctx context.Context) ([]*Tag, error) {
	result, err := h.Edges.TagOrErr()
	if IsNotLoaded(err) {
		result, err = h.QueryTag().All(ctx)
	}
	return result, err
}

func (in *IncludedNetwork) Tag(ctx context.Context) ([]*Tag, error) {
	result, err := in.Edges.TagOrErr()
	if IsNotLoaded(err) {
		result, err = in.QueryTag().All(ctx)
	}
	return result, err
}

func (in *IncludedNetwork) IncludedNetworkToEnvironment(ctx context.Context) ([]*Environment, error) {
	result, err := in.Edges.IncludedNetworkToEnvironmentOrErr()
	if IsNotLoaded(err) {
		result, err = in.QueryIncludedNetworkToEnvironment().All(ctx)
	}
	return result, err
}

func (n *Network) Tag(ctx context.Context) ([]*Tag, error) {
	result, err := n.Edges.TagOrErr()
	if IsNotLoaded(err) {
		result, err = n.QueryTag().All(ctx)
	}
	return result, err
}

func (n *Network) NetworkToEnvironment(ctx context.Context) ([]*Environment, error) {
	result, err := n.Edges.NetworkToEnvironmentOrErr()
	if IsNotLoaded(err) {
		result, err = n.QueryNetworkToEnvironment().All(ctx)
	}
	return result, err
}

func (ph *ProvisionedHost) Status(ctx context.Context) ([]*Status, error) {
	result, err := ph.Edges.StatusOrErr()
	if IsNotLoaded(err) {
		result, err = ph.QueryStatus().All(ctx)
	}
	return result, err
}

func (ph *ProvisionedHost) ProvisionedNetwork(ctx context.Context) ([]*ProvisionedNetwork, error) {
	result, err := ph.Edges.ProvisionedNetworkOrErr()
	if IsNotLoaded(err) {
		result, err = ph.QueryProvisionedNetwork().All(ctx)
	}
	return result, err
}

func (ph *ProvisionedHost) Host(ctx context.Context) ([]*Host, error) {
	result, err := ph.Edges.HostOrErr()
	if IsNotLoaded(err) {
		result, err = ph.QueryHost().All(ctx)
	}
	return result, err
}

func (ph *ProvisionedHost) ProvisionedSteps(ctx context.Context) ([]*ProvisioningStep, error) {
	result, err := ph.Edges.ProvisionedStepsOrErr()
	if IsNotLoaded(err) {
		result, err = ph.QueryProvisionedSteps().All(ctx)
	}
	return result, err
}

func (pn *ProvisionedNetwork) Status(ctx context.Context) ([]*Status, error) {
	result, err := pn.Edges.StatusOrErr()
	if IsNotLoaded(err) {
		result, err = pn.QueryStatus().All(ctx)
	}
	return result, err
}

func (pn *ProvisionedNetwork) Network(ctx context.Context) ([]*Network, error) {
	result, err := pn.Edges.NetworkOrErr()
	if IsNotLoaded(err) {
		result, err = pn.QueryNetwork().All(ctx)
	}
	return result, err
}

func (pn *ProvisionedNetwork) Build(ctx context.Context) ([]*Build, error) {
	result, err := pn.Edges.BuildOrErr()
	if IsNotLoaded(err) {
		result, err = pn.QueryBuild().All(ctx)
	}
	return result, err
}

func (pn *ProvisionedNetwork) ProvisionedNetworkToTeam(ctx context.Context) ([]*Team, error) {
	result, err := pn.Edges.ProvisionedNetworkToTeamOrErr()
	if IsNotLoaded(err) {
		result, err = pn.QueryProvisionedNetworkToTeam().All(ctx)
	}
	return result, err
}

func (pn *ProvisionedNetwork) ProvisionedHosts(ctx context.Context) ([]*ProvisionedHost, error) {
	result, err := pn.Edges.ProvisionedHostsOrErr()
	if IsNotLoaded(err) {
		result, err = pn.QueryProvisionedHosts().All(ctx)
	}
	return result, err
}

func (ps *ProvisioningStep) ProvisionedHost(ctx context.Context) ([]*ProvisionedHost, error) {
	result, err := ps.Edges.ProvisionedHostOrErr()
	if IsNotLoaded(err) {
		result, err = ps.QueryProvisionedHost().All(ctx)
	}
	return result, err
}

func (ps *ProvisioningStep) Script(ctx context.Context) ([]*Script, error) {
	result, err := ps.Edges.ScriptOrErr()
	if IsNotLoaded(err) {
		result, err = ps.QueryScript().All(ctx)
	}
	return result, err
}

func (ps *ProvisioningStep) Command(ctx context.Context) ([]*Command, error) {
	result, err := ps.Edges.CommandOrErr()
	if IsNotLoaded(err) {
		result, err = ps.QueryCommand().All(ctx)
	}
	return result, err
}

func (ps *ProvisioningStep) DNSRecord(ctx context.Context) ([]*DNSRecord, error) {
	result, err := ps.Edges.DNSRecordOrErr()
	if IsNotLoaded(err) {
		result, err = ps.QueryDNSRecord().All(ctx)
	}
	return result, err
}

func (ps *ProvisioningStep) RemoteFile(ctx context.Context) ([]*RemoteFile, error) {
	result, err := ps.Edges.RemoteFileOrErr()
	if IsNotLoaded(err) {
		result, err = ps.QueryRemoteFile().All(ctx)
	}
	return result, err
}

func (rf *RemoteFile) Tag(ctx context.Context) ([]*Tag, error) {
	result, err := rf.Edges.TagOrErr()
	if IsNotLoaded(err) {
		result, err = rf.QueryTag().All(ctx)
	}
	return result, err
}

func (s *Script) Tag(ctx context.Context) ([]*Tag, error) {
	result, err := s.Edges.TagOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryTag().All(ctx)
	}
	return result, err
}

func (s *Script) Maintainer(ctx context.Context) ([]*User, error) {
	result, err := s.Edges.MaintainerOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryMaintainer().All(ctx)
	}
	return result, err
}

func (s *Script) Finding(ctx context.Context) ([]*Finding, error) {
	result, err := s.Edges.FindingOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryFinding().All(ctx)
	}
	return result, err
}

func (s *Status) Tag(ctx context.Context) ([]*Tag, error) {
	result, err := s.Edges.TagOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryTag().All(ctx)
	}
	return result, err
}

func (t *Team) Maintainer(ctx context.Context) ([]*User, error) {
	result, err := t.Edges.MaintainerOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryMaintainer().All(ctx)
	}
	return result, err
}

func (t *Team) Build(ctx context.Context) ([]*Build, error) {
	result, err := t.Edges.BuildOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryBuild().All(ctx)
	}
	return result, err
}

func (t *Team) TeamToEnvironment(ctx context.Context) ([]*Environment, error) {
	result, err := t.Edges.TeamToEnvironmentOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryTeamToEnvironment().All(ctx)
	}
	return result, err
}

func (t *Team) Tag(ctx context.Context) ([]*Tag, error) {
	result, err := t.Edges.TagOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryTag().All(ctx)
	}
	return result, err
}

func (t *Team) ProvisionedNetworks(ctx context.Context) ([]*ProvisionedNetwork, error) {
	result, err := t.Edges.ProvisionedNetworksOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryProvisionedNetworks().All(ctx)
	}
	return result, err
}

func (u *User) Tag(ctx context.Context) ([]*Tag, error) {
	result, err := u.Edges.TagOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryTag().All(ctx)
	}
	return result, err
}
