// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
	"github.com/gen0cide/laforge/ent/command"
)

// Command is the model entity for the Command schema.
type Command struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Program holds the value of the "program" field.
	Program string `json:"program,omitempty"`
	// Args holds the value of the "args" field.
	Args []string `json:"args,omitempty"`
	// IgnoreErrors holds the value of the "ignore_errors" field.
	IgnoreErrors bool `json:"ignore_errors,omitempty"`
	// Disabled holds the value of the "disabled" field.
	Disabled bool `json:"disabled,omitempty"`
	// Cooldown holds the value of the "cooldown" field.
	Cooldown int `json:"cooldown,omitempty"`
	// Timeout holds the value of the "timeout" field.
	Timeout int `json:"timeout,omitempty"`
	// Vars holds the value of the "vars" field.
	Vars map[string]string `json:"vars,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CommandQuery when eager-loading is set.
	Edges                     CommandEdges `json:"edges"`
	provisioning_step_command *int
}

// CommandEdges holds the relations/edges for other nodes in the graph.
type CommandEdges struct {
	// User holds the value of the user edge.
	User []*User
	// Tag holds the value of the tag edge.
	Tag []*Tag
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading.
func (e CommandEdges) UserOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// TagOrErr returns the Tag value or an error if the edge
// was not loaded in eager-loading.
func (e CommandEdges) TagOrErr() ([]*Tag, error) {
	if e.loadedTypes[1] {
		return e.Tag, nil
	}
	return nil, &NotLoadedError{edge: "tag"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Command) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // name
		&sql.NullString{}, // description
		&sql.NullString{}, // program
		&[]byte{},         // args
		&sql.NullBool{},   // ignore_errors
		&sql.NullBool{},   // disabled
		&sql.NullInt64{},  // cooldown
		&sql.NullInt64{},  // timeout
		&[]byte{},         // vars
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Command) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // provisioning_step_command
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Command fields.
func (c *Command) assignValues(values ...interface{}) error {
	if m, n := len(values), len(command.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	c.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		c.Name = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field description", values[1])
	} else if value.Valid {
		c.Description = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field program", values[2])
	} else if value.Valid {
		c.Program = value.String
	}

	if value, ok := values[3].(*[]byte); !ok {
		return fmt.Errorf("unexpected type %T for field args", values[3])
	} else if value != nil && len(*value) > 0 {
		if err := json.Unmarshal(*value, &c.Args); err != nil {
			return fmt.Errorf("unmarshal field args: %v", err)
		}
	}
	if value, ok := values[4].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field ignore_errors", values[4])
	} else if value.Valid {
		c.IgnoreErrors = value.Bool
	}
	if value, ok := values[5].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field disabled", values[5])
	} else if value.Valid {
		c.Disabled = value.Bool
	}
	if value, ok := values[6].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field cooldown", values[6])
	} else if value.Valid {
		c.Cooldown = int(value.Int64)
	}
	if value, ok := values[7].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field timeout", values[7])
	} else if value.Valid {
		c.Timeout = int(value.Int64)
	}

	if value, ok := values[8].(*[]byte); !ok {
		return fmt.Errorf("unexpected type %T for field vars", values[8])
	} else if value != nil && len(*value) > 0 {
		if err := json.Unmarshal(*value, &c.Vars); err != nil {
			return fmt.Errorf("unmarshal field vars: %v", err)
		}
	}
	values = values[9:]
	if len(values) == len(command.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field provisioning_step_command", value)
		} else if value.Valid {
			c.provisioning_step_command = new(int)
			*c.provisioning_step_command = int(value.Int64)
		}
	}
	return nil
}

// QueryUser queries the user edge of the Command.
func (c *Command) QueryUser() *UserQuery {
	return (&CommandClient{config: c.config}).QueryUser(c)
}

// QueryTag queries the tag edge of the Command.
func (c *Command) QueryTag() *TagQuery {
	return (&CommandClient{config: c.config}).QueryTag(c)
}

// Update returns a builder for updating this Command.
// Note that, you need to call Command.Unwrap() before calling this method, if this Command
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Command) Update() *CommandUpdateOne {
	return (&CommandClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (c *Command) Unwrap() *Command {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Command is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Command) String() string {
	var builder strings.Builder
	builder.WriteString("Command(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", name=")
	builder.WriteString(c.Name)
	builder.WriteString(", description=")
	builder.WriteString(c.Description)
	builder.WriteString(", program=")
	builder.WriteString(c.Program)
	builder.WriteString(", args=")
	builder.WriteString(fmt.Sprintf("%v", c.Args))
	builder.WriteString(", ignore_errors=")
	builder.WriteString(fmt.Sprintf("%v", c.IgnoreErrors))
	builder.WriteString(", disabled=")
	builder.WriteString(fmt.Sprintf("%v", c.Disabled))
	builder.WriteString(", cooldown=")
	builder.WriteString(fmt.Sprintf("%v", c.Cooldown))
	builder.WriteString(", timeout=")
	builder.WriteString(fmt.Sprintf("%v", c.Timeout))
	builder.WriteString(", vars=")
	builder.WriteString(fmt.Sprintf("%v", c.Vars))
	builder.WriteByte(')')
	return builder.String()
}

// Commands is a parsable slice of Command.
type Commands []*Command

func (c Commands) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
