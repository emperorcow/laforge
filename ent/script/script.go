// Code generated by entc, DO NOT EDIT.

package script

const (
	// Label holds the string label denoting the script type in the database.
	Label = "script"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldLanguage holds the string denoting the language field in the database.
	FieldLanguage = "language"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldSource holds the string denoting the source field in the database.
	FieldSource = "source"
	// FieldSourceType holds the string denoting the source_type field in the database.
	FieldSourceType = "source_type"
	// FieldCooldown holds the string denoting the cooldown field in the database.
	FieldCooldown = "cooldown"
	// FieldTimeout holds the string denoting the timeout field in the database.
	FieldTimeout = "timeout"
	// FieldIgnoreErrors holds the string denoting the ignore_errors field in the database.
	FieldIgnoreErrors = "ignore_errors"
	// FieldArgs holds the string denoting the args field in the database.
	FieldArgs = "args"
	// FieldDisabled holds the string denoting the disabled field in the database.
	FieldDisabled = "disabled"
	// FieldVars holds the string denoting the vars field in the database.
	FieldVars = "vars"
	// FieldAbsPath holds the string denoting the abs_path field in the database.
	FieldAbsPath = "abs_path"

	// EdgeTag holds the string denoting the tag edge name in mutations.
	EdgeTag = "tag"
	// EdgeMaintainer holds the string denoting the maintainer edge name in mutations.
	EdgeMaintainer = "maintainer"
	// EdgeFinding holds the string denoting the finding edge name in mutations.
	EdgeFinding = "finding"

	// Table holds the table name of the script in the database.
	Table = "scripts"
	// TagTable is the table the holds the tag relation/edge.
	TagTable = "tags"
	// TagInverseTable is the table name for the Tag entity.
	// It exists in this package in order to avoid circular dependency with the "tag" package.
	TagInverseTable = "tags"
	// TagColumn is the table column denoting the tag relation/edge.
	TagColumn = "script_tag"
	// MaintainerTable is the table the holds the maintainer relation/edge.
	MaintainerTable = "users"
	// MaintainerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	MaintainerInverseTable = "users"
	// MaintainerColumn is the table column denoting the maintainer relation/edge.
	MaintainerColumn = "script_maintainer"
	// FindingTable is the table the holds the finding relation/edge. The primary key declared below.
	FindingTable = "finding_script"
	// FindingInverseTable is the table name for the Finding entity.
	// It exists in this package in order to avoid circular dependency with the "finding" package.
	FindingInverseTable = "findings"
)

// Columns holds all SQL columns for script fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldLanguage,
	FieldDescription,
	FieldSource,
	FieldSourceType,
	FieldCooldown,
	FieldTimeout,
	FieldIgnoreErrors,
	FieldArgs,
	FieldDisabled,
	FieldVars,
	FieldAbsPath,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the Script type.
var ForeignKeys = []string{
	"provisioning_step_script",
}

var (
	// FindingPrimaryKey and FindingColumn2 are the table columns denoting the
	// primary key for the finding relation (M2M).
	FindingPrimaryKey = []string{"finding_id", "script_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
