// Code generated by entc, DO NOT EDIT.

package environment

import (
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/gen0cide/laforge/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CompetitionID applies equality check predicate on the "competition_id" field. It's identical to CompetitionIDEQ.
func CompetitionID(v string) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCompetitionID), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// Builder applies equality check predicate on the "builder" field. It's identical to BuilderEQ.
func Builder(v string) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBuilder), v))
	})
}

// TeamCount applies equality check predicate on the "team_count" field. It's identical to TeamCountEQ.
func TeamCount(v int) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTeamCount), v))
	})
}

// Revision applies equality check predicate on the "revision" field. It's identical to RevisionEQ.
func Revision(v int) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRevision), v))
	})
}

// CompetitionIDEQ applies the EQ predicate on the "competition_id" field.
func CompetitionIDEQ(v string) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCompetitionID), v))
	})
}

// CompetitionIDNEQ applies the NEQ predicate on the "competition_id" field.
func CompetitionIDNEQ(v string) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCompetitionID), v))
	})
}

// CompetitionIDIn applies the In predicate on the "competition_id" field.
func CompetitionIDIn(vs ...string) predicate.Environment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Environment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCompetitionID), v...))
	})
}

// CompetitionIDNotIn applies the NotIn predicate on the "competition_id" field.
func CompetitionIDNotIn(vs ...string) predicate.Environment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Environment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCompetitionID), v...))
	})
}

// CompetitionIDGT applies the GT predicate on the "competition_id" field.
func CompetitionIDGT(v string) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCompetitionID), v))
	})
}

// CompetitionIDGTE applies the GTE predicate on the "competition_id" field.
func CompetitionIDGTE(v string) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCompetitionID), v))
	})
}

// CompetitionIDLT applies the LT predicate on the "competition_id" field.
func CompetitionIDLT(v string) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCompetitionID), v))
	})
}

// CompetitionIDLTE applies the LTE predicate on the "competition_id" field.
func CompetitionIDLTE(v string) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCompetitionID), v))
	})
}

// CompetitionIDContains applies the Contains predicate on the "competition_id" field.
func CompetitionIDContains(v string) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCompetitionID), v))
	})
}

// CompetitionIDHasPrefix applies the HasPrefix predicate on the "competition_id" field.
func CompetitionIDHasPrefix(v string) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCompetitionID), v))
	})
}

// CompetitionIDHasSuffix applies the HasSuffix predicate on the "competition_id" field.
func CompetitionIDHasSuffix(v string) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCompetitionID), v))
	})
}

// CompetitionIDEqualFold applies the EqualFold predicate on the "competition_id" field.
func CompetitionIDEqualFold(v string) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCompetitionID), v))
	})
}

// CompetitionIDContainsFold applies the ContainsFold predicate on the "competition_id" field.
func CompetitionIDContainsFold(v string) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCompetitionID), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Environment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Environment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Environment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Environment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Environment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Environment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Environment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Environment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// BuilderEQ applies the EQ predicate on the "builder" field.
func BuilderEQ(v string) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBuilder), v))
	})
}

// BuilderNEQ applies the NEQ predicate on the "builder" field.
func BuilderNEQ(v string) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBuilder), v))
	})
}

// BuilderIn applies the In predicate on the "builder" field.
func BuilderIn(vs ...string) predicate.Environment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Environment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBuilder), v...))
	})
}

// BuilderNotIn applies the NotIn predicate on the "builder" field.
func BuilderNotIn(vs ...string) predicate.Environment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Environment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBuilder), v...))
	})
}

// BuilderGT applies the GT predicate on the "builder" field.
func BuilderGT(v string) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBuilder), v))
	})
}

// BuilderGTE applies the GTE predicate on the "builder" field.
func BuilderGTE(v string) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBuilder), v))
	})
}

// BuilderLT applies the LT predicate on the "builder" field.
func BuilderLT(v string) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBuilder), v))
	})
}

// BuilderLTE applies the LTE predicate on the "builder" field.
func BuilderLTE(v string) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBuilder), v))
	})
}

// BuilderContains applies the Contains predicate on the "builder" field.
func BuilderContains(v string) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBuilder), v))
	})
}

// BuilderHasPrefix applies the HasPrefix predicate on the "builder" field.
func BuilderHasPrefix(v string) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBuilder), v))
	})
}

// BuilderHasSuffix applies the HasSuffix predicate on the "builder" field.
func BuilderHasSuffix(v string) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBuilder), v))
	})
}

// BuilderEqualFold applies the EqualFold predicate on the "builder" field.
func BuilderEqualFold(v string) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBuilder), v))
	})
}

// BuilderContainsFold applies the ContainsFold predicate on the "builder" field.
func BuilderContainsFold(v string) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBuilder), v))
	})
}

// TeamCountEQ applies the EQ predicate on the "team_count" field.
func TeamCountEQ(v int) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTeamCount), v))
	})
}

// TeamCountNEQ applies the NEQ predicate on the "team_count" field.
func TeamCountNEQ(v int) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTeamCount), v))
	})
}

// TeamCountIn applies the In predicate on the "team_count" field.
func TeamCountIn(vs ...int) predicate.Environment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Environment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTeamCount), v...))
	})
}

// TeamCountNotIn applies the NotIn predicate on the "team_count" field.
func TeamCountNotIn(vs ...int) predicate.Environment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Environment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTeamCount), v...))
	})
}

// TeamCountGT applies the GT predicate on the "team_count" field.
func TeamCountGT(v int) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTeamCount), v))
	})
}

// TeamCountGTE applies the GTE predicate on the "team_count" field.
func TeamCountGTE(v int) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTeamCount), v))
	})
}

// TeamCountLT applies the LT predicate on the "team_count" field.
func TeamCountLT(v int) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTeamCount), v))
	})
}

// TeamCountLTE applies the LTE predicate on the "team_count" field.
func TeamCountLTE(v int) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTeamCount), v))
	})
}

// RevisionEQ applies the EQ predicate on the "revision" field.
func RevisionEQ(v int) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRevision), v))
	})
}

// RevisionNEQ applies the NEQ predicate on the "revision" field.
func RevisionNEQ(v int) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRevision), v))
	})
}

// RevisionIn applies the In predicate on the "revision" field.
func RevisionIn(vs ...int) predicate.Environment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Environment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRevision), v...))
	})
}

// RevisionNotIn applies the NotIn predicate on the "revision" field.
func RevisionNotIn(vs ...int) predicate.Environment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Environment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRevision), v...))
	})
}

// RevisionGT applies the GT predicate on the "revision" field.
func RevisionGT(v int) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRevision), v))
	})
}

// RevisionGTE applies the GTE predicate on the "revision" field.
func RevisionGTE(v int) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRevision), v))
	})
}

// RevisionLT applies the LT predicate on the "revision" field.
func RevisionLT(v int) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRevision), v))
	})
}

// RevisionLTE applies the LTE predicate on the "revision" field.
func RevisionLTE(v int) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRevision), v))
	})
}

// HasTag applies the HasEdge predicate on the "tag" edge.
func HasTag() predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TagTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TagTable, TagColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTagWith applies the HasEdge predicate on the "tag" edge with a given conditions (other predicates).
func HasTagWith(preds ...predicate.Tag) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TagInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TagTable, TagColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHost applies the HasEdge predicate on the "host" edge.
func HasHost() predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HostTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, HostTable, HostColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHostWith applies the HasEdge predicate on the "host" edge with a given conditions (other predicates).
func HasHostWith(preds ...predicate.Host) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HostInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, HostTable, HostColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCompetition applies the HasEdge predicate on the "competition" edge.
func HasCompetition() predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CompetitionTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CompetitionTable, CompetitionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCompetitionWith applies the HasEdge predicate on the "competition" edge with a given conditions (other predicates).
func HasCompetitionWith(preds ...predicate.Competition) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CompetitionInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CompetitionTable, CompetitionColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBuild applies the HasEdge predicate on the "build" edge.
func HasBuild() predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BuildTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, BuildTable, BuildColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBuildWith applies the HasEdge predicate on the "build" edge with a given conditions (other predicates).
func HasBuildWith(preds ...predicate.Build) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BuildInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, BuildTable, BuildColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasIncludedNetwork applies the HasEdge predicate on the "included_network" edge.
func HasIncludedNetwork() predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(IncludedNetworkTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, IncludedNetworkTable, IncludedNetworkPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIncludedNetworkWith applies the HasEdge predicate on the "included_network" edge with a given conditions (other predicates).
func HasIncludedNetworkWith(preds ...predicate.IncludedNetwork) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(IncludedNetworkInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, IncludedNetworkTable, IncludedNetworkPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNetwork applies the HasEdge predicate on the "network" edge.
func HasNetwork() predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(NetworkTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, NetworkTable, NetworkPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNetworkWith applies the HasEdge predicate on the "network" edge with a given conditions (other predicates).
func HasNetworkWith(preds ...predicate.Network) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(NetworkInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, NetworkTable, NetworkPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTeam applies the HasEdge predicate on the "team" edge.
func HasTeam() predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TeamTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, TeamTable, TeamPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTeamWith applies the HasEdge predicate on the "team" edge with a given conditions (other predicates).
func HasTeamWith(preds ...predicate.Team) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TeamInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, TeamTable, TeamPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Environment) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Environment) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Environment) predicate.Environment {
	return predicate.Environment(func(s *sql.Selector) {
		p(s.Not())
	})
}
