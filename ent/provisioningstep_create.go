// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/gen0cide/laforge/ent/command"
	"github.com/gen0cide/laforge/ent/dnsrecord"
	"github.com/gen0cide/laforge/ent/provisionedhost"
	"github.com/gen0cide/laforge/ent/provisioningstep"
	"github.com/gen0cide/laforge/ent/remotefile"
	"github.com/gen0cide/laforge/ent/script"
)

// ProvisioningStepCreate is the builder for creating a ProvisioningStep entity.
type ProvisioningStepCreate struct {
	config
	mutation *ProvisioningStepMutation
	hooks    []Hook
}

// SetProvisionerType sets the provisioner_type field.
func (psc *ProvisioningStepCreate) SetProvisionerType(s string) *ProvisioningStepCreate {
	psc.mutation.SetProvisionerType(s)
	return psc
}

// SetStepNumber sets the step_number field.
func (psc *ProvisioningStepCreate) SetStepNumber(i int) *ProvisioningStepCreate {
	psc.mutation.SetStepNumber(i)
	return psc
}

// SetStatus sets the status field.
func (psc *ProvisioningStepCreate) SetStatus(s string) *ProvisioningStepCreate {
	psc.mutation.SetStatus(s)
	return psc
}

// AddProvisionedHostIDs adds the provisioned_host edge to ProvisionedHost by ids.
func (psc *ProvisioningStepCreate) AddProvisionedHostIDs(ids ...int) *ProvisioningStepCreate {
	psc.mutation.AddProvisionedHostIDs(ids...)
	return psc
}

// AddProvisionedHost adds the provisioned_host edges to ProvisionedHost.
func (psc *ProvisioningStepCreate) AddProvisionedHost(p ...*ProvisionedHost) *ProvisioningStepCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psc.AddProvisionedHostIDs(ids...)
}

// AddScriptIDs adds the script edge to Script by ids.
func (psc *ProvisioningStepCreate) AddScriptIDs(ids ...int) *ProvisioningStepCreate {
	psc.mutation.AddScriptIDs(ids...)
	return psc
}

// AddScript adds the script edges to Script.
func (psc *ProvisioningStepCreate) AddScript(s ...*Script) *ProvisioningStepCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return psc.AddScriptIDs(ids...)
}

// AddCommandIDs adds the command edge to Command by ids.
func (psc *ProvisioningStepCreate) AddCommandIDs(ids ...int) *ProvisioningStepCreate {
	psc.mutation.AddCommandIDs(ids...)
	return psc
}

// AddCommand adds the command edges to Command.
func (psc *ProvisioningStepCreate) AddCommand(c ...*Command) *ProvisioningStepCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return psc.AddCommandIDs(ids...)
}

// AddDNSRecordIDs adds the dns_record edge to DNSRecord by ids.
func (psc *ProvisioningStepCreate) AddDNSRecordIDs(ids ...int) *ProvisioningStepCreate {
	psc.mutation.AddDNSRecordIDs(ids...)
	return psc
}

// AddDNSRecord adds the dns_record edges to DNSRecord.
func (psc *ProvisioningStepCreate) AddDNSRecord(d ...*DNSRecord) *ProvisioningStepCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return psc.AddDNSRecordIDs(ids...)
}

// AddRemoteFileIDs adds the remote_file edge to RemoteFile by ids.
func (psc *ProvisioningStepCreate) AddRemoteFileIDs(ids ...int) *ProvisioningStepCreate {
	psc.mutation.AddRemoteFileIDs(ids...)
	return psc
}

// AddRemoteFile adds the remote_file edges to RemoteFile.
func (psc *ProvisioningStepCreate) AddRemoteFile(r ...*RemoteFile) *ProvisioningStepCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return psc.AddRemoteFileIDs(ids...)
}

// Mutation returns the ProvisioningStepMutation object of the builder.
func (psc *ProvisioningStepCreate) Mutation() *ProvisioningStepMutation {
	return psc.mutation
}

// Save creates the ProvisioningStep in the database.
func (psc *ProvisioningStepCreate) Save(ctx context.Context) (*ProvisioningStep, error) {
	var (
		err  error
		node *ProvisioningStep
	)
	if len(psc.hooks) == 0 {
		if err = psc.check(); err != nil {
			return nil, err
		}
		node, err = psc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProvisioningStepMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = psc.check(); err != nil {
				return nil, err
			}
			psc.mutation = mutation
			node, err = psc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(psc.hooks) - 1; i >= 0; i-- {
			mut = psc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, psc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (psc *ProvisioningStepCreate) SaveX(ctx context.Context) *ProvisioningStep {
	v, err := psc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (psc *ProvisioningStepCreate) check() error {
	if _, ok := psc.mutation.ProvisionerType(); !ok {
		return &ValidationError{Name: "provisioner_type", err: errors.New("ent: missing required field \"provisioner_type\"")}
	}
	if _, ok := psc.mutation.StepNumber(); !ok {
		return &ValidationError{Name: "step_number", err: errors.New("ent: missing required field \"step_number\"")}
	}
	if _, ok := psc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New("ent: missing required field \"status\"")}
	}
	return nil
}

func (psc *ProvisioningStepCreate) sqlSave(ctx context.Context) (*ProvisioningStep, error) {
	_node, _spec := psc.createSpec()
	if err := sqlgraph.CreateNode(ctx, psc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (psc *ProvisioningStepCreate) createSpec() (*ProvisioningStep, *sqlgraph.CreateSpec) {
	var (
		_node = &ProvisioningStep{config: psc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: provisioningstep.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: provisioningstep.FieldID,
			},
		}
	)
	if value, ok := psc.mutation.ProvisionerType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: provisioningstep.FieldProvisionerType,
		})
		_node.ProvisionerType = value
	}
	if value, ok := psc.mutation.StepNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: provisioningstep.FieldStepNumber,
		})
		_node.StepNumber = value
	}
	if value, ok := psc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: provisioningstep.FieldStatus,
		})
		_node.Status = value
	}
	if nodes := psc.mutation.ProvisionedHostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   provisioningstep.ProvisionedHostTable,
			Columns: provisioningstep.ProvisionedHostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: provisionedhost.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := psc.mutation.ScriptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.ScriptTable,
			Columns: []string{provisioningstep.ScriptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: script.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := psc.mutation.CommandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.CommandTable,
			Columns: []string{provisioningstep.CommandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: command.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := psc.mutation.DNSRecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.DNSRecordTable,
			Columns: []string{provisioningstep.DNSRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dnsrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := psc.mutation.RemoteFileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.RemoteFileTable,
			Columns: []string{provisioningstep.RemoteFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: remotefile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProvisioningStepCreateBulk is the builder for creating a bulk of ProvisioningStep entities.
type ProvisioningStepCreateBulk struct {
	config
	builders []*ProvisioningStepCreate
}

// Save creates the ProvisioningStep entities in the database.
func (pscb *ProvisioningStepCreateBulk) Save(ctx context.Context) ([]*ProvisioningStep, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pscb.builders))
	nodes := make([]*ProvisioningStep, len(pscb.builders))
	mutators := make([]Mutator, len(pscb.builders))
	for i := range pscb.builders {
		func(i int, root context.Context) {
			builder := pscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProvisioningStepMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pscb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pscb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (pscb *ProvisioningStepCreateBulk) SaveX(ctx context.Context) []*ProvisioningStep {
	v, err := pscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
