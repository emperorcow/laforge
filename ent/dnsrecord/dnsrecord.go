// Code generated by entc, DO NOT EDIT.

package dnsrecord

const (
	// Label holds the string label denoting the dnsrecord type in the database.
	Label = "dns_record"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldValues holds the string denoting the values field in the database.
	FieldValues = "values"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldZone holds the string denoting the zone field in the database.
	FieldZone = "zone"
	// FieldVars holds the string denoting the vars field in the database.
	FieldVars = "vars"
	// FieldDisabled holds the string denoting the disabled field in the database.
	FieldDisabled = "disabled"

	// EdgeTag holds the string denoting the tag edge name in mutations.
	EdgeTag = "tag"

	// Table holds the table name of the dnsrecord in the database.
	Table = "dns_records"
	// TagTable is the table the holds the tag relation/edge.
	TagTable = "tags"
	// TagInverseTable is the table name for the Tag entity.
	// It exists in this package in order to avoid circular dependency with the "tag" package.
	TagInverseTable = "tags"
	// TagColumn is the table column denoting the tag relation/edge.
	TagColumn = "dns_record_tag"
)

// Columns holds all SQL columns for dnsrecord fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldValues,
	FieldType,
	FieldZone,
	FieldVars,
	FieldDisabled,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the DNSRecord type.
var ForeignKeys = []string{
	"provisioning_step_dns_record",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
