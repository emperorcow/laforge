// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/gen0cide/laforge/ent/build"
	"github.com/gen0cide/laforge/ent/competition"
	"github.com/gen0cide/laforge/ent/environment"
	"github.com/gen0cide/laforge/ent/host"
	"github.com/gen0cide/laforge/ent/includednetwork"
	"github.com/gen0cide/laforge/ent/network"
	"github.com/gen0cide/laforge/ent/tag"
	"github.com/gen0cide/laforge/ent/team"
	"github.com/gen0cide/laforge/ent/user"
)

// EnvironmentCreate is the builder for creating a Environment entity.
type EnvironmentCreate struct {
	config
	mutation *EnvironmentMutation
	hooks    []Hook
}

// SetCompetitionID sets the competition_id field.
func (ec *EnvironmentCreate) SetCompetitionID(s string) *EnvironmentCreate {
	ec.mutation.SetCompetitionID(s)
	return ec
}

// SetName sets the name field.
func (ec *EnvironmentCreate) SetName(s string) *EnvironmentCreate {
	ec.mutation.SetName(s)
	return ec
}

// SetDescription sets the description field.
func (ec *EnvironmentCreate) SetDescription(s string) *EnvironmentCreate {
	ec.mutation.SetDescription(s)
	return ec
}

// SetBuilder sets the builder field.
func (ec *EnvironmentCreate) SetBuilder(s string) *EnvironmentCreate {
	ec.mutation.SetBuilder(s)
	return ec
}

// SetTeamCount sets the team_count field.
func (ec *EnvironmentCreate) SetTeamCount(i int) *EnvironmentCreate {
	ec.mutation.SetTeamCount(i)
	return ec
}

// SetRevision sets the revision field.
func (ec *EnvironmentCreate) SetRevision(i int) *EnvironmentCreate {
	ec.mutation.SetRevision(i)
	return ec
}

// SetAdminCidrs sets the admin_cidrs field.
func (ec *EnvironmentCreate) SetAdminCidrs(s []string) *EnvironmentCreate {
	ec.mutation.SetAdminCidrs(s)
	return ec
}

// SetExposedVdiPorts sets the exposed_vdi_ports field.
func (ec *EnvironmentCreate) SetExposedVdiPorts(s []string) *EnvironmentCreate {
	ec.mutation.SetExposedVdiPorts(s)
	return ec
}

// SetConfig sets the config field.
func (ec *EnvironmentCreate) SetConfig(m map[string]string) *EnvironmentCreate {
	ec.mutation.SetConfig(m)
	return ec
}

// AddTagIDs adds the tag edge to Tag by ids.
func (ec *EnvironmentCreate) AddTagIDs(ids ...int) *EnvironmentCreate {
	ec.mutation.AddTagIDs(ids...)
	return ec
}

// AddTag adds the tag edges to Tag.
func (ec *EnvironmentCreate) AddTag(t ...*Tag) *EnvironmentCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ec.AddTagIDs(ids...)
}

// AddUserIDs adds the user edge to User by ids.
func (ec *EnvironmentCreate) AddUserIDs(ids ...int) *EnvironmentCreate {
	ec.mutation.AddUserIDs(ids...)
	return ec
}

// AddUser adds the user edges to User.
func (ec *EnvironmentCreate) AddUser(u ...*User) *EnvironmentCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ec.AddUserIDs(ids...)
}

// AddHostIDs adds the host edge to Host by ids.
func (ec *EnvironmentCreate) AddHostIDs(ids ...int) *EnvironmentCreate {
	ec.mutation.AddHostIDs(ids...)
	return ec
}

// AddHost adds the host edges to Host.
func (ec *EnvironmentCreate) AddHost(h ...*Host) *EnvironmentCreate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return ec.AddHostIDs(ids...)
}

// AddCompetitionIDs adds the competition edge to Competition by ids.
func (ec *EnvironmentCreate) AddCompetitionIDs(ids ...int) *EnvironmentCreate {
	ec.mutation.AddCompetitionIDs(ids...)
	return ec
}

// AddCompetition adds the competition edges to Competition.
func (ec *EnvironmentCreate) AddCompetition(c ...*Competition) *EnvironmentCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ec.AddCompetitionIDs(ids...)
}

// AddBuildIDs adds the build edge to Build by ids.
func (ec *EnvironmentCreate) AddBuildIDs(ids ...int) *EnvironmentCreate {
	ec.mutation.AddBuildIDs(ids...)
	return ec
}

// AddBuild adds the build edges to Build.
func (ec *EnvironmentCreate) AddBuild(b ...*Build) *EnvironmentCreate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return ec.AddBuildIDs(ids...)
}

// AddIncludedNetworkIDs adds the included_network edge to IncludedNetwork by ids.
func (ec *EnvironmentCreate) AddIncludedNetworkIDs(ids ...int) *EnvironmentCreate {
	ec.mutation.AddIncludedNetworkIDs(ids...)
	return ec
}

// AddIncludedNetwork adds the included_network edges to IncludedNetwork.
func (ec *EnvironmentCreate) AddIncludedNetwork(i ...*IncludedNetwork) *EnvironmentCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ec.AddIncludedNetworkIDs(ids...)
}

// AddNetworkIDs adds the network edge to Network by ids.
func (ec *EnvironmentCreate) AddNetworkIDs(ids ...int) *EnvironmentCreate {
	ec.mutation.AddNetworkIDs(ids...)
	return ec
}

// AddNetwork adds the network edges to Network.
func (ec *EnvironmentCreate) AddNetwork(n ...*Network) *EnvironmentCreate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ec.AddNetworkIDs(ids...)
}

// AddTeamIDs adds the team edge to Team by ids.
func (ec *EnvironmentCreate) AddTeamIDs(ids ...int) *EnvironmentCreate {
	ec.mutation.AddTeamIDs(ids...)
	return ec
}

// AddTeam adds the team edges to Team.
func (ec *EnvironmentCreate) AddTeam(t ...*Team) *EnvironmentCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ec.AddTeamIDs(ids...)
}

// Mutation returns the EnvironmentMutation object of the builder.
func (ec *EnvironmentCreate) Mutation() *EnvironmentMutation {
	return ec.mutation
}

// Save creates the Environment in the database.
func (ec *EnvironmentCreate) Save(ctx context.Context) (*Environment, error) {
	var (
		err  error
		node *Environment
	)
	if len(ec.hooks) == 0 {
		if err = ec.check(); err != nil {
			return nil, err
		}
		node, err = ec.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EnvironmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ec.check(); err != nil {
				return nil, err
			}
			ec.mutation = mutation
			node, err = ec.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ec.hooks) - 1; i >= 0; i-- {
			mut = ec.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ec.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EnvironmentCreate) SaveX(ctx context.Context) *Environment {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (ec *EnvironmentCreate) check() error {
	if _, ok := ec.mutation.CompetitionID(); !ok {
		return &ValidationError{Name: "competition_id", err: errors.New("ent: missing required field \"competition_id\"")}
	}
	if _, ok := ec.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if _, ok := ec.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New("ent: missing required field \"description\"")}
	}
	if _, ok := ec.mutation.Builder(); !ok {
		return &ValidationError{Name: "builder", err: errors.New("ent: missing required field \"builder\"")}
	}
	if _, ok := ec.mutation.TeamCount(); !ok {
		return &ValidationError{Name: "team_count", err: errors.New("ent: missing required field \"team_count\"")}
	}
	if _, ok := ec.mutation.Revision(); !ok {
		return &ValidationError{Name: "revision", err: errors.New("ent: missing required field \"revision\"")}
	}
	if _, ok := ec.mutation.AdminCidrs(); !ok {
		return &ValidationError{Name: "admin_cidrs", err: errors.New("ent: missing required field \"admin_cidrs\"")}
	}
	if _, ok := ec.mutation.ExposedVdiPorts(); !ok {
		return &ValidationError{Name: "exposed_vdi_ports", err: errors.New("ent: missing required field \"exposed_vdi_ports\"")}
	}
	if _, ok := ec.mutation.Config(); !ok {
		return &ValidationError{Name: "config", err: errors.New("ent: missing required field \"config\"")}
	}
	return nil
}

func (ec *EnvironmentCreate) sqlSave(ctx context.Context) (*Environment, error) {
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ec *EnvironmentCreate) createSpec() (*Environment, *sqlgraph.CreateSpec) {
	var (
		_node = &Environment{config: ec.config}
		_spec = &sqlgraph.CreateSpec{
			Table: environment.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: environment.FieldID,
			},
		}
	)
	if value, ok := ec.mutation.CompetitionID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: environment.FieldCompetitionID,
		})
		_node.CompetitionID = value
	}
	if value, ok := ec.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: environment.FieldName,
		})
		_node.Name = value
	}
	if value, ok := ec.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: environment.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := ec.mutation.Builder(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: environment.FieldBuilder,
		})
		_node.Builder = value
	}
	if value, ok := ec.mutation.TeamCount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: environment.FieldTeamCount,
		})
		_node.TeamCount = value
	}
	if value, ok := ec.mutation.Revision(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: environment.FieldRevision,
		})
		_node.Revision = value
	}
	if value, ok := ec.mutation.AdminCidrs(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: environment.FieldAdminCidrs,
		})
		_node.AdminCidrs = value
	}
	if value, ok := ec.mutation.ExposedVdiPorts(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: environment.FieldExposedVdiPorts,
		})
		_node.ExposedVdiPorts = value
	}
	if value, ok := ec.mutation.Config(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: environment.FieldConfig,
		})
		_node.Config = value
	}
	if nodes := ec.mutation.TagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.TagTable,
			Columns: []string{environment.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.UserTable,
			Columns: []string{environment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.HostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.HostTable,
			Columns: []string{environment.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: host.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.CompetitionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.CompetitionTable,
			Columns: []string{environment.CompetitionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: competition.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.BuildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.BuildTable,
			Columns: []string{environment.BuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: build.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.IncludedNetworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   environment.IncludedNetworkTable,
			Columns: environment.IncludedNetworkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: includednetwork.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.NetworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   environment.NetworkTable,
			Columns: environment.NetworkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: network.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   environment.TeamTable,
			Columns: environment.TeamPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: team.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EnvironmentCreateBulk is the builder for creating a bulk of Environment entities.
type EnvironmentCreateBulk struct {
	config
	builders []*EnvironmentCreate
}

// Save creates the Environment entities in the database.
func (ecb *EnvironmentCreateBulk) Save(ctx context.Context) ([]*Environment, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Environment, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EnvironmentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (ecb *EnvironmentCreateBulk) SaveX(ctx context.Context) []*Environment {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
