// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
	"github.com/gen0cide/laforge/ent/environment"
)

// Environment is the model entity for the Environment schema.
type Environment struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CompetitionID holds the value of the "competition_id" field.
	CompetitionID string `json:"competition_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Builder holds the value of the "builder" field.
	Builder string `json:"builder,omitempty"`
	// TeamCount holds the value of the "team_count" field.
	TeamCount int `json:"team_count,omitempty"`
	// Revision holds the value of the "revision" field.
	Revision int `json:"revision,omitempty"`
	// AdminCidrs holds the value of the "admin_cidrs" field.
	AdminCidrs []string `json:"admin_cidrs,omitempty"`
	// ExposedVdiPorts holds the value of the "exposed_vdi_ports" field.
	ExposedVdiPorts []string `json:"exposed_vdi_ports,omitempty"`
	// Config holds the value of the "config" field.
	Config map[string]string `json:"config,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EnvironmentQuery when eager-loading is set.
	Edges EnvironmentEdges `json:"edges"`
}

// EnvironmentEdges holds the relations/edges for other nodes in the graph.
type EnvironmentEdges struct {
	// Tag holds the value of the tag edge.
	Tag []*Tag
	// User holds the value of the user edge.
	User []*User
	// Host holds the value of the host edge.
	Host []*Host
	// Competition holds the value of the competition edge.
	Competition []*Competition
	// Build holds the value of the build edge.
	Build []*Build
	// IncludedNetwork holds the value of the included_network edge.
	IncludedNetwork []*IncludedNetwork
	// Network holds the value of the network edge.
	Network []*Network
	// Team holds the value of the team edge.
	Team []*Team
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [8]bool
}

// TagOrErr returns the Tag value or an error if the edge
// was not loaded in eager-loading.
func (e EnvironmentEdges) TagOrErr() ([]*Tag, error) {
	if e.loadedTypes[0] {
		return e.Tag, nil
	}
	return nil, &NotLoadedError{edge: "tag"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading.
func (e EnvironmentEdges) UserOrErr() ([]*User, error) {
	if e.loadedTypes[1] {
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// HostOrErr returns the Host value or an error if the edge
// was not loaded in eager-loading.
func (e EnvironmentEdges) HostOrErr() ([]*Host, error) {
	if e.loadedTypes[2] {
		return e.Host, nil
	}
	return nil, &NotLoadedError{edge: "host"}
}

// CompetitionOrErr returns the Competition value or an error if the edge
// was not loaded in eager-loading.
func (e EnvironmentEdges) CompetitionOrErr() ([]*Competition, error) {
	if e.loadedTypes[3] {
		return e.Competition, nil
	}
	return nil, &NotLoadedError{edge: "competition"}
}

// BuildOrErr returns the Build value or an error if the edge
// was not loaded in eager-loading.
func (e EnvironmentEdges) BuildOrErr() ([]*Build, error) {
	if e.loadedTypes[4] {
		return e.Build, nil
	}
	return nil, &NotLoadedError{edge: "build"}
}

// IncludedNetworkOrErr returns the IncludedNetwork value or an error if the edge
// was not loaded in eager-loading.
func (e EnvironmentEdges) IncludedNetworkOrErr() ([]*IncludedNetwork, error) {
	if e.loadedTypes[5] {
		return e.IncludedNetwork, nil
	}
	return nil, &NotLoadedError{edge: "included_network"}
}

// NetworkOrErr returns the Network value or an error if the edge
// was not loaded in eager-loading.
func (e EnvironmentEdges) NetworkOrErr() ([]*Network, error) {
	if e.loadedTypes[6] {
		return e.Network, nil
	}
	return nil, &NotLoadedError{edge: "network"}
}

// TeamOrErr returns the Team value or an error if the edge
// was not loaded in eager-loading.
func (e EnvironmentEdges) TeamOrErr() ([]*Team, error) {
	if e.loadedTypes[7] {
		return e.Team, nil
	}
	return nil, &NotLoadedError{edge: "team"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Environment) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // competition_id
		&sql.NullString{}, // name
		&sql.NullString{}, // description
		&sql.NullString{}, // builder
		&sql.NullInt64{},  // team_count
		&sql.NullInt64{},  // revision
		&[]byte{},         // admin_cidrs
		&[]byte{},         // exposed_vdi_ports
		&[]byte{},         // config
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Environment fields.
func (e *Environment) assignValues(values ...interface{}) error {
	if m, n := len(values), len(environment.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	e.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field competition_id", values[0])
	} else if value.Valid {
		e.CompetitionID = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[1])
	} else if value.Valid {
		e.Name = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field description", values[2])
	} else if value.Valid {
		e.Description = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field builder", values[3])
	} else if value.Valid {
		e.Builder = value.String
	}
	if value, ok := values[4].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field team_count", values[4])
	} else if value.Valid {
		e.TeamCount = int(value.Int64)
	}
	if value, ok := values[5].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field revision", values[5])
	} else if value.Valid {
		e.Revision = int(value.Int64)
	}

	if value, ok := values[6].(*[]byte); !ok {
		return fmt.Errorf("unexpected type %T for field admin_cidrs", values[6])
	} else if value != nil && len(*value) > 0 {
		if err := json.Unmarshal(*value, &e.AdminCidrs); err != nil {
			return fmt.Errorf("unmarshal field admin_cidrs: %v", err)
		}
	}

	if value, ok := values[7].(*[]byte); !ok {
		return fmt.Errorf("unexpected type %T for field exposed_vdi_ports", values[7])
	} else if value != nil && len(*value) > 0 {
		if err := json.Unmarshal(*value, &e.ExposedVdiPorts); err != nil {
			return fmt.Errorf("unmarshal field exposed_vdi_ports: %v", err)
		}
	}

	if value, ok := values[8].(*[]byte); !ok {
		return fmt.Errorf("unexpected type %T for field config", values[8])
	} else if value != nil && len(*value) > 0 {
		if err := json.Unmarshal(*value, &e.Config); err != nil {
			return fmt.Errorf("unmarshal field config: %v", err)
		}
	}
	return nil
}

// QueryTag queries the tag edge of the Environment.
func (e *Environment) QueryTag() *TagQuery {
	return (&EnvironmentClient{config: e.config}).QueryTag(e)
}

// QueryUser queries the user edge of the Environment.
func (e *Environment) QueryUser() *UserQuery {
	return (&EnvironmentClient{config: e.config}).QueryUser(e)
}

// QueryHost queries the host edge of the Environment.
func (e *Environment) QueryHost() *HostQuery {
	return (&EnvironmentClient{config: e.config}).QueryHost(e)
}

// QueryCompetition queries the competition edge of the Environment.
func (e *Environment) QueryCompetition() *CompetitionQuery {
	return (&EnvironmentClient{config: e.config}).QueryCompetition(e)
}

// QueryBuild queries the build edge of the Environment.
func (e *Environment) QueryBuild() *BuildQuery {
	return (&EnvironmentClient{config: e.config}).QueryBuild(e)
}

// QueryIncludedNetwork queries the included_network edge of the Environment.
func (e *Environment) QueryIncludedNetwork() *IncludedNetworkQuery {
	return (&EnvironmentClient{config: e.config}).QueryIncludedNetwork(e)
}

// QueryNetwork queries the network edge of the Environment.
func (e *Environment) QueryNetwork() *NetworkQuery {
	return (&EnvironmentClient{config: e.config}).QueryNetwork(e)
}

// QueryTeam queries the team edge of the Environment.
func (e *Environment) QueryTeam() *TeamQuery {
	return (&EnvironmentClient{config: e.config}).QueryTeam(e)
}

// Update returns a builder for updating this Environment.
// Note that, you need to call Environment.Unwrap() before calling this method, if this Environment
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Environment) Update() *EnvironmentUpdateOne {
	return (&EnvironmentClient{config: e.config}).UpdateOne(e)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (e *Environment) Unwrap() *Environment {
	tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Environment is not a transactional entity")
	}
	e.config.driver = tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Environment) String() string {
	var builder strings.Builder
	builder.WriteString("Environment(")
	builder.WriteString(fmt.Sprintf("id=%v", e.ID))
	builder.WriteString(", competition_id=")
	builder.WriteString(e.CompetitionID)
	builder.WriteString(", name=")
	builder.WriteString(e.Name)
	builder.WriteString(", description=")
	builder.WriteString(e.Description)
	builder.WriteString(", builder=")
	builder.WriteString(e.Builder)
	builder.WriteString(", team_count=")
	builder.WriteString(fmt.Sprintf("%v", e.TeamCount))
	builder.WriteString(", revision=")
	builder.WriteString(fmt.Sprintf("%v", e.Revision))
	builder.WriteString(", admin_cidrs=")
	builder.WriteString(fmt.Sprintf("%v", e.AdminCidrs))
	builder.WriteString(", exposed_vdi_ports=")
	builder.WriteString(fmt.Sprintf("%v", e.ExposedVdiPorts))
	builder.WriteString(", config=")
	builder.WriteString(fmt.Sprintf("%v", e.Config))
	builder.WriteByte(')')
	return builder.String()
}

// Environments is a parsable slice of Environment.
type Environments []*Environment

func (e Environments) config(cfg config) {
	for _i := range e {
		e[_i].config = cfg
	}
}
