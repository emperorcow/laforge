// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/gen0cide/laforge/ent/command"
	"github.com/gen0cide/laforge/ent/dnsrecord"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/gen0cide/laforge/ent/provisionedhost"
	"github.com/gen0cide/laforge/ent/provisioningstep"
	"github.com/gen0cide/laforge/ent/remotefile"
	"github.com/gen0cide/laforge/ent/script"
)

// ProvisioningStepUpdate is the builder for updating ProvisioningStep entities.
type ProvisioningStepUpdate struct {
	config
	hooks    []Hook
	mutation *ProvisioningStepMutation
}

// Where adds a new predicate for the builder.
func (psu *ProvisioningStepUpdate) Where(ps ...predicate.ProvisioningStep) *ProvisioningStepUpdate {
	psu.mutation.predicates = append(psu.mutation.predicates, ps...)
	return psu
}

// SetProvisionerType sets the provisioner_type field.
func (psu *ProvisioningStepUpdate) SetProvisionerType(s string) *ProvisioningStepUpdate {
	psu.mutation.SetProvisionerType(s)
	return psu
}

// SetStepNumber sets the step_number field.
func (psu *ProvisioningStepUpdate) SetStepNumber(i int) *ProvisioningStepUpdate {
	psu.mutation.ResetStepNumber()
	psu.mutation.SetStepNumber(i)
	return psu
}

// AddStepNumber adds i to step_number.
func (psu *ProvisioningStepUpdate) AddStepNumber(i int) *ProvisioningStepUpdate {
	psu.mutation.AddStepNumber(i)
	return psu
}

// SetStatus sets the status field.
func (psu *ProvisioningStepUpdate) SetStatus(s string) *ProvisioningStepUpdate {
	psu.mutation.SetStatus(s)
	return psu
}

// AddProvisionedHostIDs adds the provisioned_host edge to ProvisionedHost by ids.
func (psu *ProvisioningStepUpdate) AddProvisionedHostIDs(ids ...int) *ProvisioningStepUpdate {
	psu.mutation.AddProvisionedHostIDs(ids...)
	return psu
}

// AddProvisionedHost adds the provisioned_host edges to ProvisionedHost.
func (psu *ProvisioningStepUpdate) AddProvisionedHost(p ...*ProvisionedHost) *ProvisioningStepUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psu.AddProvisionedHostIDs(ids...)
}

// AddScriptIDs adds the script edge to Script by ids.
func (psu *ProvisioningStepUpdate) AddScriptIDs(ids ...int) *ProvisioningStepUpdate {
	psu.mutation.AddScriptIDs(ids...)
	return psu
}

// AddScript adds the script edges to Script.
func (psu *ProvisioningStepUpdate) AddScript(s ...*Script) *ProvisioningStepUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return psu.AddScriptIDs(ids...)
}

// AddCommandIDs adds the command edge to Command by ids.
func (psu *ProvisioningStepUpdate) AddCommandIDs(ids ...int) *ProvisioningStepUpdate {
	psu.mutation.AddCommandIDs(ids...)
	return psu
}

// AddCommand adds the command edges to Command.
func (psu *ProvisioningStepUpdate) AddCommand(c ...*Command) *ProvisioningStepUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return psu.AddCommandIDs(ids...)
}

// AddDNSRecordIDs adds the dns_record edge to DNSRecord by ids.
func (psu *ProvisioningStepUpdate) AddDNSRecordIDs(ids ...int) *ProvisioningStepUpdate {
	psu.mutation.AddDNSRecordIDs(ids...)
	return psu
}

// AddDNSRecord adds the dns_record edges to DNSRecord.
func (psu *ProvisioningStepUpdate) AddDNSRecord(d ...*DNSRecord) *ProvisioningStepUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return psu.AddDNSRecordIDs(ids...)
}

// AddRemoteFileIDs adds the remote_file edge to RemoteFile by ids.
func (psu *ProvisioningStepUpdate) AddRemoteFileIDs(ids ...int) *ProvisioningStepUpdate {
	psu.mutation.AddRemoteFileIDs(ids...)
	return psu
}

// AddRemoteFile adds the remote_file edges to RemoteFile.
func (psu *ProvisioningStepUpdate) AddRemoteFile(r ...*RemoteFile) *ProvisioningStepUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return psu.AddRemoteFileIDs(ids...)
}

// Mutation returns the ProvisioningStepMutation object of the builder.
func (psu *ProvisioningStepUpdate) Mutation() *ProvisioningStepMutation {
	return psu.mutation
}

// ClearProvisionedHost clears all "provisioned_host" edges to type ProvisionedHost.
func (psu *ProvisioningStepUpdate) ClearProvisionedHost() *ProvisioningStepUpdate {
	psu.mutation.ClearProvisionedHost()
	return psu
}

// RemoveProvisionedHostIDs removes the provisioned_host edge to ProvisionedHost by ids.
func (psu *ProvisioningStepUpdate) RemoveProvisionedHostIDs(ids ...int) *ProvisioningStepUpdate {
	psu.mutation.RemoveProvisionedHostIDs(ids...)
	return psu
}

// RemoveProvisionedHost removes provisioned_host edges to ProvisionedHost.
func (psu *ProvisioningStepUpdate) RemoveProvisionedHost(p ...*ProvisionedHost) *ProvisioningStepUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psu.RemoveProvisionedHostIDs(ids...)
}

// ClearScript clears all "script" edges to type Script.
func (psu *ProvisioningStepUpdate) ClearScript() *ProvisioningStepUpdate {
	psu.mutation.ClearScript()
	return psu
}

// RemoveScriptIDs removes the script edge to Script by ids.
func (psu *ProvisioningStepUpdate) RemoveScriptIDs(ids ...int) *ProvisioningStepUpdate {
	psu.mutation.RemoveScriptIDs(ids...)
	return psu
}

// RemoveScript removes script edges to Script.
func (psu *ProvisioningStepUpdate) RemoveScript(s ...*Script) *ProvisioningStepUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return psu.RemoveScriptIDs(ids...)
}

// ClearCommand clears all "command" edges to type Command.
func (psu *ProvisioningStepUpdate) ClearCommand() *ProvisioningStepUpdate {
	psu.mutation.ClearCommand()
	return psu
}

// RemoveCommandIDs removes the command edge to Command by ids.
func (psu *ProvisioningStepUpdate) RemoveCommandIDs(ids ...int) *ProvisioningStepUpdate {
	psu.mutation.RemoveCommandIDs(ids...)
	return psu
}

// RemoveCommand removes command edges to Command.
func (psu *ProvisioningStepUpdate) RemoveCommand(c ...*Command) *ProvisioningStepUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return psu.RemoveCommandIDs(ids...)
}

// ClearDNSRecord clears all "dns_record" edges to type DNSRecord.
func (psu *ProvisioningStepUpdate) ClearDNSRecord() *ProvisioningStepUpdate {
	psu.mutation.ClearDNSRecord()
	return psu
}

// RemoveDNSRecordIDs removes the dns_record edge to DNSRecord by ids.
func (psu *ProvisioningStepUpdate) RemoveDNSRecordIDs(ids ...int) *ProvisioningStepUpdate {
	psu.mutation.RemoveDNSRecordIDs(ids...)
	return psu
}

// RemoveDNSRecord removes dns_record edges to DNSRecord.
func (psu *ProvisioningStepUpdate) RemoveDNSRecord(d ...*DNSRecord) *ProvisioningStepUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return psu.RemoveDNSRecordIDs(ids...)
}

// ClearRemoteFile clears all "remote_file" edges to type RemoteFile.
func (psu *ProvisioningStepUpdate) ClearRemoteFile() *ProvisioningStepUpdate {
	psu.mutation.ClearRemoteFile()
	return psu
}

// RemoveRemoteFileIDs removes the remote_file edge to RemoteFile by ids.
func (psu *ProvisioningStepUpdate) RemoveRemoteFileIDs(ids ...int) *ProvisioningStepUpdate {
	psu.mutation.RemoveRemoteFileIDs(ids...)
	return psu
}

// RemoveRemoteFile removes remote_file edges to RemoteFile.
func (psu *ProvisioningStepUpdate) RemoveRemoteFile(r ...*RemoteFile) *ProvisioningStepUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return psu.RemoveRemoteFileIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (psu *ProvisioningStepUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(psu.hooks) == 0 {
		affected, err = psu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProvisioningStepMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			psu.mutation = mutation
			affected, err = psu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(psu.hooks) - 1; i >= 0; i-- {
			mut = psu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, psu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (psu *ProvisioningStepUpdate) SaveX(ctx context.Context) int {
	affected, err := psu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (psu *ProvisioningStepUpdate) Exec(ctx context.Context) error {
	_, err := psu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psu *ProvisioningStepUpdate) ExecX(ctx context.Context) {
	if err := psu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (psu *ProvisioningStepUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   provisioningstep.Table,
			Columns: provisioningstep.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: provisioningstep.FieldID,
			},
		},
	}
	if ps := psu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psu.mutation.ProvisionerType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: provisioningstep.FieldProvisionerType,
		})
	}
	if value, ok := psu.mutation.StepNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: provisioningstep.FieldStepNumber,
		})
	}
	if value, ok := psu.mutation.AddedStepNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: provisioningstep.FieldStepNumber,
		})
	}
	if value, ok := psu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: provisioningstep.FieldStatus,
		})
	}
	if psu.mutation.ProvisionedHostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   provisioningstep.ProvisionedHostTable,
			Columns: provisioningstep.ProvisionedHostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: provisionedhost.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.RemovedProvisionedHostIDs(); len(nodes) > 0 && !psu.mutation.ProvisionedHostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   provisioningstep.ProvisionedHostTable,
			Columns: provisioningstep.ProvisionedHostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: provisionedhost.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.ProvisionedHostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   provisioningstep.ProvisionedHostTable,
			Columns: provisioningstep.ProvisionedHostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: provisionedhost.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.ScriptCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.ScriptTable,
			Columns: []string{provisioningstep.ScriptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: script.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.RemovedScriptIDs(); len(nodes) > 0 && !psu.mutation.ScriptCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.ScriptTable,
			Columns: []string{provisioningstep.ScriptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: script.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.ScriptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.ScriptTable,
			Columns: []string{provisioningstep.ScriptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: script.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.CommandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.CommandTable,
			Columns: []string{provisioningstep.CommandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: command.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.RemovedCommandIDs(); len(nodes) > 0 && !psu.mutation.CommandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.CommandTable,
			Columns: []string{provisioningstep.CommandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: command.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.CommandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.CommandTable,
			Columns: []string{provisioningstep.CommandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: command.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.DNSRecordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.DNSRecordTable,
			Columns: []string{provisioningstep.DNSRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dnsrecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.RemovedDNSRecordIDs(); len(nodes) > 0 && !psu.mutation.DNSRecordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.DNSRecordTable,
			Columns: []string{provisioningstep.DNSRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dnsrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.DNSRecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.DNSRecordTable,
			Columns: []string{provisioningstep.DNSRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dnsrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.RemoteFileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.RemoteFileTable,
			Columns: []string{provisioningstep.RemoteFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: remotefile.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.RemovedRemoteFileIDs(); len(nodes) > 0 && !psu.mutation.RemoteFileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.RemoteFileTable,
			Columns: []string{provisioningstep.RemoteFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: remotefile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.RemoteFileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.RemoteFileTable,
			Columns: []string{provisioningstep.RemoteFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: remotefile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, psu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{provisioningstep.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ProvisioningStepUpdateOne is the builder for updating a single ProvisioningStep entity.
type ProvisioningStepUpdateOne struct {
	config
	hooks    []Hook
	mutation *ProvisioningStepMutation
}

// SetProvisionerType sets the provisioner_type field.
func (psuo *ProvisioningStepUpdateOne) SetProvisionerType(s string) *ProvisioningStepUpdateOne {
	psuo.mutation.SetProvisionerType(s)
	return psuo
}

// SetStepNumber sets the step_number field.
func (psuo *ProvisioningStepUpdateOne) SetStepNumber(i int) *ProvisioningStepUpdateOne {
	psuo.mutation.ResetStepNumber()
	psuo.mutation.SetStepNumber(i)
	return psuo
}

// AddStepNumber adds i to step_number.
func (psuo *ProvisioningStepUpdateOne) AddStepNumber(i int) *ProvisioningStepUpdateOne {
	psuo.mutation.AddStepNumber(i)
	return psuo
}

// SetStatus sets the status field.
func (psuo *ProvisioningStepUpdateOne) SetStatus(s string) *ProvisioningStepUpdateOne {
	psuo.mutation.SetStatus(s)
	return psuo
}

// AddProvisionedHostIDs adds the provisioned_host edge to ProvisionedHost by ids.
func (psuo *ProvisioningStepUpdateOne) AddProvisionedHostIDs(ids ...int) *ProvisioningStepUpdateOne {
	psuo.mutation.AddProvisionedHostIDs(ids...)
	return psuo
}

// AddProvisionedHost adds the provisioned_host edges to ProvisionedHost.
func (psuo *ProvisioningStepUpdateOne) AddProvisionedHost(p ...*ProvisionedHost) *ProvisioningStepUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psuo.AddProvisionedHostIDs(ids...)
}

// AddScriptIDs adds the script edge to Script by ids.
func (psuo *ProvisioningStepUpdateOne) AddScriptIDs(ids ...int) *ProvisioningStepUpdateOne {
	psuo.mutation.AddScriptIDs(ids...)
	return psuo
}

// AddScript adds the script edges to Script.
func (psuo *ProvisioningStepUpdateOne) AddScript(s ...*Script) *ProvisioningStepUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return psuo.AddScriptIDs(ids...)
}

// AddCommandIDs adds the command edge to Command by ids.
func (psuo *ProvisioningStepUpdateOne) AddCommandIDs(ids ...int) *ProvisioningStepUpdateOne {
	psuo.mutation.AddCommandIDs(ids...)
	return psuo
}

// AddCommand adds the command edges to Command.
func (psuo *ProvisioningStepUpdateOne) AddCommand(c ...*Command) *ProvisioningStepUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return psuo.AddCommandIDs(ids...)
}

// AddDNSRecordIDs adds the dns_record edge to DNSRecord by ids.
func (psuo *ProvisioningStepUpdateOne) AddDNSRecordIDs(ids ...int) *ProvisioningStepUpdateOne {
	psuo.mutation.AddDNSRecordIDs(ids...)
	return psuo
}

// AddDNSRecord adds the dns_record edges to DNSRecord.
func (psuo *ProvisioningStepUpdateOne) AddDNSRecord(d ...*DNSRecord) *ProvisioningStepUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return psuo.AddDNSRecordIDs(ids...)
}

// AddRemoteFileIDs adds the remote_file edge to RemoteFile by ids.
func (psuo *ProvisioningStepUpdateOne) AddRemoteFileIDs(ids ...int) *ProvisioningStepUpdateOne {
	psuo.mutation.AddRemoteFileIDs(ids...)
	return psuo
}

// AddRemoteFile adds the remote_file edges to RemoteFile.
func (psuo *ProvisioningStepUpdateOne) AddRemoteFile(r ...*RemoteFile) *ProvisioningStepUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return psuo.AddRemoteFileIDs(ids...)
}

// Mutation returns the ProvisioningStepMutation object of the builder.
func (psuo *ProvisioningStepUpdateOne) Mutation() *ProvisioningStepMutation {
	return psuo.mutation
}

// ClearProvisionedHost clears all "provisioned_host" edges to type ProvisionedHost.
func (psuo *ProvisioningStepUpdateOne) ClearProvisionedHost() *ProvisioningStepUpdateOne {
	psuo.mutation.ClearProvisionedHost()
	return psuo
}

// RemoveProvisionedHostIDs removes the provisioned_host edge to ProvisionedHost by ids.
func (psuo *ProvisioningStepUpdateOne) RemoveProvisionedHostIDs(ids ...int) *ProvisioningStepUpdateOne {
	psuo.mutation.RemoveProvisionedHostIDs(ids...)
	return psuo
}

// RemoveProvisionedHost removes provisioned_host edges to ProvisionedHost.
func (psuo *ProvisioningStepUpdateOne) RemoveProvisionedHost(p ...*ProvisionedHost) *ProvisioningStepUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psuo.RemoveProvisionedHostIDs(ids...)
}

// ClearScript clears all "script" edges to type Script.
func (psuo *ProvisioningStepUpdateOne) ClearScript() *ProvisioningStepUpdateOne {
	psuo.mutation.ClearScript()
	return psuo
}

// RemoveScriptIDs removes the script edge to Script by ids.
func (psuo *ProvisioningStepUpdateOne) RemoveScriptIDs(ids ...int) *ProvisioningStepUpdateOne {
	psuo.mutation.RemoveScriptIDs(ids...)
	return psuo
}

// RemoveScript removes script edges to Script.
func (psuo *ProvisioningStepUpdateOne) RemoveScript(s ...*Script) *ProvisioningStepUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return psuo.RemoveScriptIDs(ids...)
}

// ClearCommand clears all "command" edges to type Command.
func (psuo *ProvisioningStepUpdateOne) ClearCommand() *ProvisioningStepUpdateOne {
	psuo.mutation.ClearCommand()
	return psuo
}

// RemoveCommandIDs removes the command edge to Command by ids.
func (psuo *ProvisioningStepUpdateOne) RemoveCommandIDs(ids ...int) *ProvisioningStepUpdateOne {
	psuo.mutation.RemoveCommandIDs(ids...)
	return psuo
}

// RemoveCommand removes command edges to Command.
func (psuo *ProvisioningStepUpdateOne) RemoveCommand(c ...*Command) *ProvisioningStepUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return psuo.RemoveCommandIDs(ids...)
}

// ClearDNSRecord clears all "dns_record" edges to type DNSRecord.
func (psuo *ProvisioningStepUpdateOne) ClearDNSRecord() *ProvisioningStepUpdateOne {
	psuo.mutation.ClearDNSRecord()
	return psuo
}

// RemoveDNSRecordIDs removes the dns_record edge to DNSRecord by ids.
func (psuo *ProvisioningStepUpdateOne) RemoveDNSRecordIDs(ids ...int) *ProvisioningStepUpdateOne {
	psuo.mutation.RemoveDNSRecordIDs(ids...)
	return psuo
}

// RemoveDNSRecord removes dns_record edges to DNSRecord.
func (psuo *ProvisioningStepUpdateOne) RemoveDNSRecord(d ...*DNSRecord) *ProvisioningStepUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return psuo.RemoveDNSRecordIDs(ids...)
}

// ClearRemoteFile clears all "remote_file" edges to type RemoteFile.
func (psuo *ProvisioningStepUpdateOne) ClearRemoteFile() *ProvisioningStepUpdateOne {
	psuo.mutation.ClearRemoteFile()
	return psuo
}

// RemoveRemoteFileIDs removes the remote_file edge to RemoteFile by ids.
func (psuo *ProvisioningStepUpdateOne) RemoveRemoteFileIDs(ids ...int) *ProvisioningStepUpdateOne {
	psuo.mutation.RemoveRemoteFileIDs(ids...)
	return psuo
}

// RemoveRemoteFile removes remote_file edges to RemoteFile.
func (psuo *ProvisioningStepUpdateOne) RemoveRemoteFile(r ...*RemoteFile) *ProvisioningStepUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return psuo.RemoveRemoteFileIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (psuo *ProvisioningStepUpdateOne) Save(ctx context.Context) (*ProvisioningStep, error) {
	var (
		err  error
		node *ProvisioningStep
	)
	if len(psuo.hooks) == 0 {
		node, err = psuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProvisioningStepMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			psuo.mutation = mutation
			node, err = psuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(psuo.hooks) - 1; i >= 0; i-- {
			mut = psuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, psuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (psuo *ProvisioningStepUpdateOne) SaveX(ctx context.Context) *ProvisioningStep {
	node, err := psuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (psuo *ProvisioningStepUpdateOne) Exec(ctx context.Context) error {
	_, err := psuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psuo *ProvisioningStepUpdateOne) ExecX(ctx context.Context) {
	if err := psuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (psuo *ProvisioningStepUpdateOne) sqlSave(ctx context.Context) (_node *ProvisioningStep, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   provisioningstep.Table,
			Columns: provisioningstep.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: provisioningstep.FieldID,
			},
		},
	}
	id, ok := psuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ProvisioningStep.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := psuo.mutation.ProvisionerType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: provisioningstep.FieldProvisionerType,
		})
	}
	if value, ok := psuo.mutation.StepNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: provisioningstep.FieldStepNumber,
		})
	}
	if value, ok := psuo.mutation.AddedStepNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: provisioningstep.FieldStepNumber,
		})
	}
	if value, ok := psuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: provisioningstep.FieldStatus,
		})
	}
	if psuo.mutation.ProvisionedHostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   provisioningstep.ProvisionedHostTable,
			Columns: provisioningstep.ProvisionedHostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: provisionedhost.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.RemovedProvisionedHostIDs(); len(nodes) > 0 && !psuo.mutation.ProvisionedHostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   provisioningstep.ProvisionedHostTable,
			Columns: provisioningstep.ProvisionedHostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: provisionedhost.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.ProvisionedHostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   provisioningstep.ProvisionedHostTable,
			Columns: provisioningstep.ProvisionedHostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: provisionedhost.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.ScriptCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.ScriptTable,
			Columns: []string{provisioningstep.ScriptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: script.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.RemovedScriptIDs(); len(nodes) > 0 && !psuo.mutation.ScriptCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.ScriptTable,
			Columns: []string{provisioningstep.ScriptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: script.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.ScriptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.ScriptTable,
			Columns: []string{provisioningstep.ScriptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: script.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.CommandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.CommandTable,
			Columns: []string{provisioningstep.CommandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: command.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.RemovedCommandIDs(); len(nodes) > 0 && !psuo.mutation.CommandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.CommandTable,
			Columns: []string{provisioningstep.CommandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: command.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.CommandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.CommandTable,
			Columns: []string{provisioningstep.CommandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: command.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.DNSRecordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.DNSRecordTable,
			Columns: []string{provisioningstep.DNSRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dnsrecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.RemovedDNSRecordIDs(); len(nodes) > 0 && !psuo.mutation.DNSRecordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.DNSRecordTable,
			Columns: []string{provisioningstep.DNSRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dnsrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.DNSRecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.DNSRecordTable,
			Columns: []string{provisioningstep.DNSRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dnsrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.RemoteFileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.RemoteFileTable,
			Columns: []string{provisioningstep.RemoteFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: remotefile.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.RemovedRemoteFileIDs(); len(nodes) > 0 && !psuo.mutation.RemoteFileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.RemoteFileTable,
			Columns: []string{provisioningstep.RemoteFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: remotefile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.RemoteFileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.RemoteFileTable,
			Columns: []string{provisioningstep.RemoteFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: remotefile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProvisioningStep{config: psuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, psuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{provisioningstep.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
