// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/gen0cide/laforge/ent/build"
	"github.com/gen0cide/laforge/ent/competition"
	"github.com/gen0cide/laforge/ent/environment"
	"github.com/gen0cide/laforge/ent/host"
	"github.com/gen0cide/laforge/ent/includednetwork"
	"github.com/gen0cide/laforge/ent/network"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/gen0cide/laforge/ent/tag"
	"github.com/gen0cide/laforge/ent/team"
	"github.com/gen0cide/laforge/ent/user"
)

// EnvironmentUpdate is the builder for updating Environment entities.
type EnvironmentUpdate struct {
	config
	hooks    []Hook
	mutation *EnvironmentMutation
}

// Where adds a new predicate for the builder.
func (eu *EnvironmentUpdate) Where(ps ...predicate.Environment) *EnvironmentUpdate {
	eu.mutation.predicates = append(eu.mutation.predicates, ps...)
	return eu
}

// SetCompetitionID sets the competition_id field.
func (eu *EnvironmentUpdate) SetCompetitionID(s string) *EnvironmentUpdate {
	eu.mutation.SetCompetitionID(s)
	return eu
}

// SetName sets the name field.
func (eu *EnvironmentUpdate) SetName(s string) *EnvironmentUpdate {
	eu.mutation.SetName(s)
	return eu
}

// SetDescription sets the description field.
func (eu *EnvironmentUpdate) SetDescription(s string) *EnvironmentUpdate {
	eu.mutation.SetDescription(s)
	return eu
}

// SetBuilder sets the builder field.
func (eu *EnvironmentUpdate) SetBuilder(s string) *EnvironmentUpdate {
	eu.mutation.SetBuilder(s)
	return eu
}

// SetTeamCount sets the team_count field.
func (eu *EnvironmentUpdate) SetTeamCount(i int) *EnvironmentUpdate {
	eu.mutation.ResetTeamCount()
	eu.mutation.SetTeamCount(i)
	return eu
}

// AddTeamCount adds i to team_count.
func (eu *EnvironmentUpdate) AddTeamCount(i int) *EnvironmentUpdate {
	eu.mutation.AddTeamCount(i)
	return eu
}

// SetRevision sets the revision field.
func (eu *EnvironmentUpdate) SetRevision(i int) *EnvironmentUpdate {
	eu.mutation.ResetRevision()
	eu.mutation.SetRevision(i)
	return eu
}

// AddRevision adds i to revision.
func (eu *EnvironmentUpdate) AddRevision(i int) *EnvironmentUpdate {
	eu.mutation.AddRevision(i)
	return eu
}

// SetAdminCidrs sets the admin_cidrs field.
func (eu *EnvironmentUpdate) SetAdminCidrs(s []string) *EnvironmentUpdate {
	eu.mutation.SetAdminCidrs(s)
	return eu
}

// SetExposedVdiPorts sets the exposed_vdi_ports field.
func (eu *EnvironmentUpdate) SetExposedVdiPorts(s []string) *EnvironmentUpdate {
	eu.mutation.SetExposedVdiPorts(s)
	return eu
}

// SetConfig sets the config field.
func (eu *EnvironmentUpdate) SetConfig(m map[string]string) *EnvironmentUpdate {
	eu.mutation.SetConfig(m)
	return eu
}

// AddTagIDs adds the tag edge to Tag by ids.
func (eu *EnvironmentUpdate) AddTagIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.AddTagIDs(ids...)
	return eu
}

// AddTag adds the tag edges to Tag.
func (eu *EnvironmentUpdate) AddTag(t ...*Tag) *EnvironmentUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return eu.AddTagIDs(ids...)
}

// AddUserIDs adds the user edge to User by ids.
func (eu *EnvironmentUpdate) AddUserIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.AddUserIDs(ids...)
	return eu
}

// AddUser adds the user edges to User.
func (eu *EnvironmentUpdate) AddUser(u ...*User) *EnvironmentUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eu.AddUserIDs(ids...)
}

// AddHostIDs adds the host edge to Host by ids.
func (eu *EnvironmentUpdate) AddHostIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.AddHostIDs(ids...)
	return eu
}

// AddHost adds the host edges to Host.
func (eu *EnvironmentUpdate) AddHost(h ...*Host) *EnvironmentUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return eu.AddHostIDs(ids...)
}

// AddCompetitionIDs adds the competition edge to Competition by ids.
func (eu *EnvironmentUpdate) AddCompetitionIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.AddCompetitionIDs(ids...)
	return eu
}

// AddCompetition adds the competition edges to Competition.
func (eu *EnvironmentUpdate) AddCompetition(c ...*Competition) *EnvironmentUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eu.AddCompetitionIDs(ids...)
}

// AddBuildIDs adds the build edge to Build by ids.
func (eu *EnvironmentUpdate) AddBuildIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.AddBuildIDs(ids...)
	return eu
}

// AddBuild adds the build edges to Build.
func (eu *EnvironmentUpdate) AddBuild(b ...*Build) *EnvironmentUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return eu.AddBuildIDs(ids...)
}

// AddIncludedNetworkIDs adds the included_network edge to IncludedNetwork by ids.
func (eu *EnvironmentUpdate) AddIncludedNetworkIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.AddIncludedNetworkIDs(ids...)
	return eu
}

// AddIncludedNetwork adds the included_network edges to IncludedNetwork.
func (eu *EnvironmentUpdate) AddIncludedNetwork(i ...*IncludedNetwork) *EnvironmentUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return eu.AddIncludedNetworkIDs(ids...)
}

// AddNetworkIDs adds the network edge to Network by ids.
func (eu *EnvironmentUpdate) AddNetworkIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.AddNetworkIDs(ids...)
	return eu
}

// AddNetwork adds the network edges to Network.
func (eu *EnvironmentUpdate) AddNetwork(n ...*Network) *EnvironmentUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return eu.AddNetworkIDs(ids...)
}

// AddTeamIDs adds the team edge to Team by ids.
func (eu *EnvironmentUpdate) AddTeamIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.AddTeamIDs(ids...)
	return eu
}

// AddTeam adds the team edges to Team.
func (eu *EnvironmentUpdate) AddTeam(t ...*Team) *EnvironmentUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return eu.AddTeamIDs(ids...)
}

// Mutation returns the EnvironmentMutation object of the builder.
func (eu *EnvironmentUpdate) Mutation() *EnvironmentMutation {
	return eu.mutation
}

// ClearTag clears all "tag" edges to type Tag.
func (eu *EnvironmentUpdate) ClearTag() *EnvironmentUpdate {
	eu.mutation.ClearTag()
	return eu
}

// RemoveTagIDs removes the tag edge to Tag by ids.
func (eu *EnvironmentUpdate) RemoveTagIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.RemoveTagIDs(ids...)
	return eu
}

// RemoveTag removes tag edges to Tag.
func (eu *EnvironmentUpdate) RemoveTag(t ...*Tag) *EnvironmentUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return eu.RemoveTagIDs(ids...)
}

// ClearUser clears all "user" edges to type User.
func (eu *EnvironmentUpdate) ClearUser() *EnvironmentUpdate {
	eu.mutation.ClearUser()
	return eu
}

// RemoveUserIDs removes the user edge to User by ids.
func (eu *EnvironmentUpdate) RemoveUserIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.RemoveUserIDs(ids...)
	return eu
}

// RemoveUser removes user edges to User.
func (eu *EnvironmentUpdate) RemoveUser(u ...*User) *EnvironmentUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eu.RemoveUserIDs(ids...)
}

// ClearHost clears all "host" edges to type Host.
func (eu *EnvironmentUpdate) ClearHost() *EnvironmentUpdate {
	eu.mutation.ClearHost()
	return eu
}

// RemoveHostIDs removes the host edge to Host by ids.
func (eu *EnvironmentUpdate) RemoveHostIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.RemoveHostIDs(ids...)
	return eu
}

// RemoveHost removes host edges to Host.
func (eu *EnvironmentUpdate) RemoveHost(h ...*Host) *EnvironmentUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return eu.RemoveHostIDs(ids...)
}

// ClearCompetition clears all "competition" edges to type Competition.
func (eu *EnvironmentUpdate) ClearCompetition() *EnvironmentUpdate {
	eu.mutation.ClearCompetition()
	return eu
}

// RemoveCompetitionIDs removes the competition edge to Competition by ids.
func (eu *EnvironmentUpdate) RemoveCompetitionIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.RemoveCompetitionIDs(ids...)
	return eu
}

// RemoveCompetition removes competition edges to Competition.
func (eu *EnvironmentUpdate) RemoveCompetition(c ...*Competition) *EnvironmentUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eu.RemoveCompetitionIDs(ids...)
}

// ClearBuild clears all "build" edges to type Build.
func (eu *EnvironmentUpdate) ClearBuild() *EnvironmentUpdate {
	eu.mutation.ClearBuild()
	return eu
}

// RemoveBuildIDs removes the build edge to Build by ids.
func (eu *EnvironmentUpdate) RemoveBuildIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.RemoveBuildIDs(ids...)
	return eu
}

// RemoveBuild removes build edges to Build.
func (eu *EnvironmentUpdate) RemoveBuild(b ...*Build) *EnvironmentUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return eu.RemoveBuildIDs(ids...)
}

// ClearIncludedNetwork clears all "included_network" edges to type IncludedNetwork.
func (eu *EnvironmentUpdate) ClearIncludedNetwork() *EnvironmentUpdate {
	eu.mutation.ClearIncludedNetwork()
	return eu
}

// RemoveIncludedNetworkIDs removes the included_network edge to IncludedNetwork by ids.
func (eu *EnvironmentUpdate) RemoveIncludedNetworkIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.RemoveIncludedNetworkIDs(ids...)
	return eu
}

// RemoveIncludedNetwork removes included_network edges to IncludedNetwork.
func (eu *EnvironmentUpdate) RemoveIncludedNetwork(i ...*IncludedNetwork) *EnvironmentUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return eu.RemoveIncludedNetworkIDs(ids...)
}

// ClearNetwork clears all "network" edges to type Network.
func (eu *EnvironmentUpdate) ClearNetwork() *EnvironmentUpdate {
	eu.mutation.ClearNetwork()
	return eu
}

// RemoveNetworkIDs removes the network edge to Network by ids.
func (eu *EnvironmentUpdate) RemoveNetworkIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.RemoveNetworkIDs(ids...)
	return eu
}

// RemoveNetwork removes network edges to Network.
func (eu *EnvironmentUpdate) RemoveNetwork(n ...*Network) *EnvironmentUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return eu.RemoveNetworkIDs(ids...)
}

// ClearTeam clears all "team" edges to type Team.
func (eu *EnvironmentUpdate) ClearTeam() *EnvironmentUpdate {
	eu.mutation.ClearTeam()
	return eu
}

// RemoveTeamIDs removes the team edge to Team by ids.
func (eu *EnvironmentUpdate) RemoveTeamIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.RemoveTeamIDs(ids...)
	return eu
}

// RemoveTeam removes team edges to Team.
func (eu *EnvironmentUpdate) RemoveTeam(t ...*Team) *EnvironmentUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return eu.RemoveTeamIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EnvironmentUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(eu.hooks) == 0 {
		affected, err = eu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EnvironmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			eu.mutation = mutation
			affected, err = eu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(eu.hooks) - 1; i >= 0; i-- {
			mut = eu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EnvironmentUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EnvironmentUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EnvironmentUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eu *EnvironmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   environment.Table,
			Columns: environment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: environment.FieldID,
			},
		},
	}
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.CompetitionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: environment.FieldCompetitionID,
		})
	}
	if value, ok := eu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: environment.FieldName,
		})
	}
	if value, ok := eu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: environment.FieldDescription,
		})
	}
	if value, ok := eu.mutation.Builder(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: environment.FieldBuilder,
		})
	}
	if value, ok := eu.mutation.TeamCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: environment.FieldTeamCount,
		})
	}
	if value, ok := eu.mutation.AddedTeamCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: environment.FieldTeamCount,
		})
	}
	if value, ok := eu.mutation.Revision(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: environment.FieldRevision,
		})
	}
	if value, ok := eu.mutation.AddedRevision(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: environment.FieldRevision,
		})
	}
	if value, ok := eu.mutation.AdminCidrs(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: environment.FieldAdminCidrs,
		})
	}
	if value, ok := eu.mutation.ExposedVdiPorts(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: environment.FieldExposedVdiPorts,
		})
	}
	if value, ok := eu.mutation.Config(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: environment.FieldConfig,
		})
	}
	if eu.mutation.TagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.TagTable,
			Columns: []string{environment.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedTagIDs(); len(nodes) > 0 && !eu.mutation.TagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.TagTable,
			Columns: []string{environment.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.TagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.TagTable,
			Columns: []string{environment.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.UserTable,
			Columns: []string{environment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedUserIDs(); len(nodes) > 0 && !eu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.UserTable,
			Columns: []string{environment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.UserTable,
			Columns: []string{environment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.HostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.HostTable,
			Columns: []string{environment.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: host.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedHostIDs(); len(nodes) > 0 && !eu.mutation.HostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.HostTable,
			Columns: []string{environment.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: host.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.HostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.HostTable,
			Columns: []string{environment.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: host.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.CompetitionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.CompetitionTable,
			Columns: []string{environment.CompetitionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: competition.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedCompetitionIDs(); len(nodes) > 0 && !eu.mutation.CompetitionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.CompetitionTable,
			Columns: []string{environment.CompetitionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: competition.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.CompetitionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.CompetitionTable,
			Columns: []string{environment.CompetitionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: competition.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.BuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.BuildTable,
			Columns: []string{environment.BuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: build.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedBuildIDs(); len(nodes) > 0 && !eu.mutation.BuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.BuildTable,
			Columns: []string{environment.BuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: build.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.BuildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.BuildTable,
			Columns: []string{environment.BuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: build.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.IncludedNetworkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   environment.IncludedNetworkTable,
			Columns: environment.IncludedNetworkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: includednetwork.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedIncludedNetworkIDs(); len(nodes) > 0 && !eu.mutation.IncludedNetworkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   environment.IncludedNetworkTable,
			Columns: environment.IncludedNetworkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: includednetwork.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.IncludedNetworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   environment.IncludedNetworkTable,
			Columns: environment.IncludedNetworkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: includednetwork.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.NetworkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   environment.NetworkTable,
			Columns: environment.NetworkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: network.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedNetworkIDs(); len(nodes) > 0 && !eu.mutation.NetworkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   environment.NetworkTable,
			Columns: environment.NetworkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: network.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.NetworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   environment.NetworkTable,
			Columns: environment.NetworkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: network.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   environment.TeamTable,
			Columns: environment.TeamPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: team.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedTeamIDs(); len(nodes) > 0 && !eu.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   environment.TeamTable,
			Columns: environment.TeamPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: team.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   environment.TeamTable,
			Columns: environment.TeamPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: team.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{environment.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// EnvironmentUpdateOne is the builder for updating a single Environment entity.
type EnvironmentUpdateOne struct {
	config
	hooks    []Hook
	mutation *EnvironmentMutation
}

// SetCompetitionID sets the competition_id field.
func (euo *EnvironmentUpdateOne) SetCompetitionID(s string) *EnvironmentUpdateOne {
	euo.mutation.SetCompetitionID(s)
	return euo
}

// SetName sets the name field.
func (euo *EnvironmentUpdateOne) SetName(s string) *EnvironmentUpdateOne {
	euo.mutation.SetName(s)
	return euo
}

// SetDescription sets the description field.
func (euo *EnvironmentUpdateOne) SetDescription(s string) *EnvironmentUpdateOne {
	euo.mutation.SetDescription(s)
	return euo
}

// SetBuilder sets the builder field.
func (euo *EnvironmentUpdateOne) SetBuilder(s string) *EnvironmentUpdateOne {
	euo.mutation.SetBuilder(s)
	return euo
}

// SetTeamCount sets the team_count field.
func (euo *EnvironmentUpdateOne) SetTeamCount(i int) *EnvironmentUpdateOne {
	euo.mutation.ResetTeamCount()
	euo.mutation.SetTeamCount(i)
	return euo
}

// AddTeamCount adds i to team_count.
func (euo *EnvironmentUpdateOne) AddTeamCount(i int) *EnvironmentUpdateOne {
	euo.mutation.AddTeamCount(i)
	return euo
}

// SetRevision sets the revision field.
func (euo *EnvironmentUpdateOne) SetRevision(i int) *EnvironmentUpdateOne {
	euo.mutation.ResetRevision()
	euo.mutation.SetRevision(i)
	return euo
}

// AddRevision adds i to revision.
func (euo *EnvironmentUpdateOne) AddRevision(i int) *EnvironmentUpdateOne {
	euo.mutation.AddRevision(i)
	return euo
}

// SetAdminCidrs sets the admin_cidrs field.
func (euo *EnvironmentUpdateOne) SetAdminCidrs(s []string) *EnvironmentUpdateOne {
	euo.mutation.SetAdminCidrs(s)
	return euo
}

// SetExposedVdiPorts sets the exposed_vdi_ports field.
func (euo *EnvironmentUpdateOne) SetExposedVdiPorts(s []string) *EnvironmentUpdateOne {
	euo.mutation.SetExposedVdiPorts(s)
	return euo
}

// SetConfig sets the config field.
func (euo *EnvironmentUpdateOne) SetConfig(m map[string]string) *EnvironmentUpdateOne {
	euo.mutation.SetConfig(m)
	return euo
}

// AddTagIDs adds the tag edge to Tag by ids.
func (euo *EnvironmentUpdateOne) AddTagIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.AddTagIDs(ids...)
	return euo
}

// AddTag adds the tag edges to Tag.
func (euo *EnvironmentUpdateOne) AddTag(t ...*Tag) *EnvironmentUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return euo.AddTagIDs(ids...)
}

// AddUserIDs adds the user edge to User by ids.
func (euo *EnvironmentUpdateOne) AddUserIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.AddUserIDs(ids...)
	return euo
}

// AddUser adds the user edges to User.
func (euo *EnvironmentUpdateOne) AddUser(u ...*User) *EnvironmentUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return euo.AddUserIDs(ids...)
}

// AddHostIDs adds the host edge to Host by ids.
func (euo *EnvironmentUpdateOne) AddHostIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.AddHostIDs(ids...)
	return euo
}

// AddHost adds the host edges to Host.
func (euo *EnvironmentUpdateOne) AddHost(h ...*Host) *EnvironmentUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return euo.AddHostIDs(ids...)
}

// AddCompetitionIDs adds the competition edge to Competition by ids.
func (euo *EnvironmentUpdateOne) AddCompetitionIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.AddCompetitionIDs(ids...)
	return euo
}

// AddCompetition adds the competition edges to Competition.
func (euo *EnvironmentUpdateOne) AddCompetition(c ...*Competition) *EnvironmentUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return euo.AddCompetitionIDs(ids...)
}

// AddBuildIDs adds the build edge to Build by ids.
func (euo *EnvironmentUpdateOne) AddBuildIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.AddBuildIDs(ids...)
	return euo
}

// AddBuild adds the build edges to Build.
func (euo *EnvironmentUpdateOne) AddBuild(b ...*Build) *EnvironmentUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return euo.AddBuildIDs(ids...)
}

// AddIncludedNetworkIDs adds the included_network edge to IncludedNetwork by ids.
func (euo *EnvironmentUpdateOne) AddIncludedNetworkIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.AddIncludedNetworkIDs(ids...)
	return euo
}

// AddIncludedNetwork adds the included_network edges to IncludedNetwork.
func (euo *EnvironmentUpdateOne) AddIncludedNetwork(i ...*IncludedNetwork) *EnvironmentUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return euo.AddIncludedNetworkIDs(ids...)
}

// AddNetworkIDs adds the network edge to Network by ids.
func (euo *EnvironmentUpdateOne) AddNetworkIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.AddNetworkIDs(ids...)
	return euo
}

// AddNetwork adds the network edges to Network.
func (euo *EnvironmentUpdateOne) AddNetwork(n ...*Network) *EnvironmentUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return euo.AddNetworkIDs(ids...)
}

// AddTeamIDs adds the team edge to Team by ids.
func (euo *EnvironmentUpdateOne) AddTeamIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.AddTeamIDs(ids...)
	return euo
}

// AddTeam adds the team edges to Team.
func (euo *EnvironmentUpdateOne) AddTeam(t ...*Team) *EnvironmentUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return euo.AddTeamIDs(ids...)
}

// Mutation returns the EnvironmentMutation object of the builder.
func (euo *EnvironmentUpdateOne) Mutation() *EnvironmentMutation {
	return euo.mutation
}

// ClearTag clears all "tag" edges to type Tag.
func (euo *EnvironmentUpdateOne) ClearTag() *EnvironmentUpdateOne {
	euo.mutation.ClearTag()
	return euo
}

// RemoveTagIDs removes the tag edge to Tag by ids.
func (euo *EnvironmentUpdateOne) RemoveTagIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.RemoveTagIDs(ids...)
	return euo
}

// RemoveTag removes tag edges to Tag.
func (euo *EnvironmentUpdateOne) RemoveTag(t ...*Tag) *EnvironmentUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return euo.RemoveTagIDs(ids...)
}

// ClearUser clears all "user" edges to type User.
func (euo *EnvironmentUpdateOne) ClearUser() *EnvironmentUpdateOne {
	euo.mutation.ClearUser()
	return euo
}

// RemoveUserIDs removes the user edge to User by ids.
func (euo *EnvironmentUpdateOne) RemoveUserIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.RemoveUserIDs(ids...)
	return euo
}

// RemoveUser removes user edges to User.
func (euo *EnvironmentUpdateOne) RemoveUser(u ...*User) *EnvironmentUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return euo.RemoveUserIDs(ids...)
}

// ClearHost clears all "host" edges to type Host.
func (euo *EnvironmentUpdateOne) ClearHost() *EnvironmentUpdateOne {
	euo.mutation.ClearHost()
	return euo
}

// RemoveHostIDs removes the host edge to Host by ids.
func (euo *EnvironmentUpdateOne) RemoveHostIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.RemoveHostIDs(ids...)
	return euo
}

// RemoveHost removes host edges to Host.
func (euo *EnvironmentUpdateOne) RemoveHost(h ...*Host) *EnvironmentUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return euo.RemoveHostIDs(ids...)
}

// ClearCompetition clears all "competition" edges to type Competition.
func (euo *EnvironmentUpdateOne) ClearCompetition() *EnvironmentUpdateOne {
	euo.mutation.ClearCompetition()
	return euo
}

// RemoveCompetitionIDs removes the competition edge to Competition by ids.
func (euo *EnvironmentUpdateOne) RemoveCompetitionIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.RemoveCompetitionIDs(ids...)
	return euo
}

// RemoveCompetition removes competition edges to Competition.
func (euo *EnvironmentUpdateOne) RemoveCompetition(c ...*Competition) *EnvironmentUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return euo.RemoveCompetitionIDs(ids...)
}

// ClearBuild clears all "build" edges to type Build.
func (euo *EnvironmentUpdateOne) ClearBuild() *EnvironmentUpdateOne {
	euo.mutation.ClearBuild()
	return euo
}

// RemoveBuildIDs removes the build edge to Build by ids.
func (euo *EnvironmentUpdateOne) RemoveBuildIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.RemoveBuildIDs(ids...)
	return euo
}

// RemoveBuild removes build edges to Build.
func (euo *EnvironmentUpdateOne) RemoveBuild(b ...*Build) *EnvironmentUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return euo.RemoveBuildIDs(ids...)
}

// ClearIncludedNetwork clears all "included_network" edges to type IncludedNetwork.
func (euo *EnvironmentUpdateOne) ClearIncludedNetwork() *EnvironmentUpdateOne {
	euo.mutation.ClearIncludedNetwork()
	return euo
}

// RemoveIncludedNetworkIDs removes the included_network edge to IncludedNetwork by ids.
func (euo *EnvironmentUpdateOne) RemoveIncludedNetworkIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.RemoveIncludedNetworkIDs(ids...)
	return euo
}

// RemoveIncludedNetwork removes included_network edges to IncludedNetwork.
func (euo *EnvironmentUpdateOne) RemoveIncludedNetwork(i ...*IncludedNetwork) *EnvironmentUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return euo.RemoveIncludedNetworkIDs(ids...)
}

// ClearNetwork clears all "network" edges to type Network.
func (euo *EnvironmentUpdateOne) ClearNetwork() *EnvironmentUpdateOne {
	euo.mutation.ClearNetwork()
	return euo
}

// RemoveNetworkIDs removes the network edge to Network by ids.
func (euo *EnvironmentUpdateOne) RemoveNetworkIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.RemoveNetworkIDs(ids...)
	return euo
}

// RemoveNetwork removes network edges to Network.
func (euo *EnvironmentUpdateOne) RemoveNetwork(n ...*Network) *EnvironmentUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return euo.RemoveNetworkIDs(ids...)
}

// ClearTeam clears all "team" edges to type Team.
func (euo *EnvironmentUpdateOne) ClearTeam() *EnvironmentUpdateOne {
	euo.mutation.ClearTeam()
	return euo
}

// RemoveTeamIDs removes the team edge to Team by ids.
func (euo *EnvironmentUpdateOne) RemoveTeamIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.RemoveTeamIDs(ids...)
	return euo
}

// RemoveTeam removes team edges to Team.
func (euo *EnvironmentUpdateOne) RemoveTeam(t ...*Team) *EnvironmentUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return euo.RemoveTeamIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (euo *EnvironmentUpdateOne) Save(ctx context.Context) (*Environment, error) {
	var (
		err  error
		node *Environment
	)
	if len(euo.hooks) == 0 {
		node, err = euo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EnvironmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			euo.mutation = mutation
			node, err = euo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(euo.hooks) - 1; i >= 0; i-- {
			mut = euo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, euo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EnvironmentUpdateOne) SaveX(ctx context.Context) *Environment {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EnvironmentUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EnvironmentUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (euo *EnvironmentUpdateOne) sqlSave(ctx context.Context) (_node *Environment, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   environment.Table,
			Columns: environment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: environment.FieldID,
			},
		},
	}
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Environment.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := euo.mutation.CompetitionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: environment.FieldCompetitionID,
		})
	}
	if value, ok := euo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: environment.FieldName,
		})
	}
	if value, ok := euo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: environment.FieldDescription,
		})
	}
	if value, ok := euo.mutation.Builder(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: environment.FieldBuilder,
		})
	}
	if value, ok := euo.mutation.TeamCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: environment.FieldTeamCount,
		})
	}
	if value, ok := euo.mutation.AddedTeamCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: environment.FieldTeamCount,
		})
	}
	if value, ok := euo.mutation.Revision(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: environment.FieldRevision,
		})
	}
	if value, ok := euo.mutation.AddedRevision(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: environment.FieldRevision,
		})
	}
	if value, ok := euo.mutation.AdminCidrs(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: environment.FieldAdminCidrs,
		})
	}
	if value, ok := euo.mutation.ExposedVdiPorts(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: environment.FieldExposedVdiPorts,
		})
	}
	if value, ok := euo.mutation.Config(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: environment.FieldConfig,
		})
	}
	if euo.mutation.TagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.TagTable,
			Columns: []string{environment.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedTagIDs(); len(nodes) > 0 && !euo.mutation.TagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.TagTable,
			Columns: []string{environment.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.TagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.TagTable,
			Columns: []string{environment.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.UserTable,
			Columns: []string{environment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedUserIDs(); len(nodes) > 0 && !euo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.UserTable,
			Columns: []string{environment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.UserTable,
			Columns: []string{environment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.HostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.HostTable,
			Columns: []string{environment.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: host.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedHostIDs(); len(nodes) > 0 && !euo.mutation.HostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.HostTable,
			Columns: []string{environment.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: host.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.HostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.HostTable,
			Columns: []string{environment.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: host.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.CompetitionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.CompetitionTable,
			Columns: []string{environment.CompetitionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: competition.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedCompetitionIDs(); len(nodes) > 0 && !euo.mutation.CompetitionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.CompetitionTable,
			Columns: []string{environment.CompetitionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: competition.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.CompetitionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.CompetitionTable,
			Columns: []string{environment.CompetitionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: competition.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.BuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.BuildTable,
			Columns: []string{environment.BuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: build.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedBuildIDs(); len(nodes) > 0 && !euo.mutation.BuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.BuildTable,
			Columns: []string{environment.BuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: build.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.BuildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.BuildTable,
			Columns: []string{environment.BuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: build.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.IncludedNetworkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   environment.IncludedNetworkTable,
			Columns: environment.IncludedNetworkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: includednetwork.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedIncludedNetworkIDs(); len(nodes) > 0 && !euo.mutation.IncludedNetworkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   environment.IncludedNetworkTable,
			Columns: environment.IncludedNetworkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: includednetwork.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.IncludedNetworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   environment.IncludedNetworkTable,
			Columns: environment.IncludedNetworkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: includednetwork.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.NetworkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   environment.NetworkTable,
			Columns: environment.NetworkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: network.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedNetworkIDs(); len(nodes) > 0 && !euo.mutation.NetworkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   environment.NetworkTable,
			Columns: environment.NetworkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: network.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.NetworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   environment.NetworkTable,
			Columns: environment.NetworkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: network.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   environment.TeamTable,
			Columns: environment.TeamPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: team.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedTeamIDs(); len(nodes) > 0 && !euo.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   environment.TeamTable,
			Columns: environment.TeamPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: team.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   environment.TeamTable,
			Columns: environment.TeamPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: team.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Environment{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{environment.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
