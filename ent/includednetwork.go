// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
	"github.com/gen0cide/laforge/ent/includednetwork"
)

// IncludedNetwork is the model entity for the IncludedNetwork schema.
type IncludedNetwork struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Hosts holds the value of the "hosts" field.
	Hosts []string `json:"hosts,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the IncludedNetworkQuery when eager-loading is set.
	Edges IncludedNetworkEdges `json:"edges"`
}

// IncludedNetworkEdges holds the relations/edges for other nodes in the graph.
type IncludedNetworkEdges struct {
	// Tag holds the value of the tag edge.
	Tag []*Tag
	// IncludedNetworkToEnvironment holds the value of the IncludedNetworkToEnvironment edge.
	IncludedNetworkToEnvironment []*Environment
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TagOrErr returns the Tag value or an error if the edge
// was not loaded in eager-loading.
func (e IncludedNetworkEdges) TagOrErr() ([]*Tag, error) {
	if e.loadedTypes[0] {
		return e.Tag, nil
	}
	return nil, &NotLoadedError{edge: "tag"}
}

// IncludedNetworkToEnvironmentOrErr returns the IncludedNetworkToEnvironment value or an error if the edge
// was not loaded in eager-loading.
func (e IncludedNetworkEdges) IncludedNetworkToEnvironmentOrErr() ([]*Environment, error) {
	if e.loadedTypes[1] {
		return e.IncludedNetworkToEnvironment, nil
	}
	return nil, &NotLoadedError{edge: "IncludedNetworkToEnvironment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*IncludedNetwork) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // name
		&[]byte{},         // hosts
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the IncludedNetwork fields.
func (in *IncludedNetwork) assignValues(values ...interface{}) error {
	if m, n := len(values), len(includednetwork.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	in.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		in.Name = value.String
	}

	if value, ok := values[1].(*[]byte); !ok {
		return fmt.Errorf("unexpected type %T for field hosts", values[1])
	} else if value != nil && len(*value) > 0 {
		if err := json.Unmarshal(*value, &in.Hosts); err != nil {
			return fmt.Errorf("unmarshal field hosts: %v", err)
		}
	}
	return nil
}

// QueryTag queries the tag edge of the IncludedNetwork.
func (in *IncludedNetwork) QueryTag() *TagQuery {
	return (&IncludedNetworkClient{config: in.config}).QueryTag(in)
}

// QueryIncludedNetworkToEnvironment queries the IncludedNetworkToEnvironment edge of the IncludedNetwork.
func (in *IncludedNetwork) QueryIncludedNetworkToEnvironment() *EnvironmentQuery {
	return (&IncludedNetworkClient{config: in.config}).QueryIncludedNetworkToEnvironment(in)
}

// Update returns a builder for updating this IncludedNetwork.
// Note that, you need to call IncludedNetwork.Unwrap() before calling this method, if this IncludedNetwork
// was returned from a transaction, and the transaction was committed or rolled back.
func (in *IncludedNetwork) Update() *IncludedNetworkUpdateOne {
	return (&IncludedNetworkClient{config: in.config}).UpdateOne(in)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (in *IncludedNetwork) Unwrap() *IncludedNetwork {
	tx, ok := in.config.driver.(*txDriver)
	if !ok {
		panic("ent: IncludedNetwork is not a transactional entity")
	}
	in.config.driver = tx.drv
	return in
}

// String implements the fmt.Stringer.
func (in *IncludedNetwork) String() string {
	var builder strings.Builder
	builder.WriteString("IncludedNetwork(")
	builder.WriteString(fmt.Sprintf("id=%v", in.ID))
	builder.WriteString(", name=")
	builder.WriteString(in.Name)
	builder.WriteString(", hosts=")
	builder.WriteString(fmt.Sprintf("%v", in.Hosts))
	builder.WriteByte(')')
	return builder.String()
}

// IncludedNetworks is a parsable slice of IncludedNetwork.
type IncludedNetworks []*IncludedNetwork

func (in IncludedNetworks) config(cfg config) {
	for _i := range in {
		in[_i].config = cfg
	}
}
