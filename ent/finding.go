// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
	"github.com/gen0cide/laforge/ent/finding"
)

// Finding is the model entity for the Finding schema.
type Finding struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Severity holds the value of the "severity" field.
	Severity finding.Severity `json:"severity,omitempty"`
	// Difficulty holds the value of the "difficulty" field.
	Difficulty finding.Difficulty `json:"difficulty,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FindingQuery when eager-loading is set.
	Edges FindingEdges `json:"edges"`
}

// FindingEdges holds the relations/edges for other nodes in the graph.
type FindingEdges struct {
	// User holds the value of the user edge.
	User []*User
	// Tag holds the value of the tag edge.
	Tag []*Tag
	// Host holds the value of the host edge.
	Host []*Host
	// Script holds the value of the script edge.
	Script []*Script
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading.
func (e FindingEdges) UserOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// TagOrErr returns the Tag value or an error if the edge
// was not loaded in eager-loading.
func (e FindingEdges) TagOrErr() ([]*Tag, error) {
	if e.loadedTypes[1] {
		return e.Tag, nil
	}
	return nil, &NotLoadedError{edge: "tag"}
}

// HostOrErr returns the Host value or an error if the edge
// was not loaded in eager-loading.
func (e FindingEdges) HostOrErr() ([]*Host, error) {
	if e.loadedTypes[2] {
		return e.Host, nil
	}
	return nil, &NotLoadedError{edge: "host"}
}

// ScriptOrErr returns the Script value or an error if the edge
// was not loaded in eager-loading.
func (e FindingEdges) ScriptOrErr() ([]*Script, error) {
	if e.loadedTypes[3] {
		return e.Script, nil
	}
	return nil, &NotLoadedError{edge: "script"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Finding) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // name
		&sql.NullString{}, // description
		&sql.NullString{}, // severity
		&sql.NullString{}, // difficulty
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Finding fields.
func (f *Finding) assignValues(values ...interface{}) error {
	if m, n := len(values), len(finding.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	f.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		f.Name = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field description", values[1])
	} else if value.Valid {
		f.Description = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field severity", values[2])
	} else if value.Valid {
		f.Severity = finding.Severity(value.String)
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field difficulty", values[3])
	} else if value.Valid {
		f.Difficulty = finding.Difficulty(value.String)
	}
	return nil
}

// QueryUser queries the user edge of the Finding.
func (f *Finding) QueryUser() *UserQuery {
	return (&FindingClient{config: f.config}).QueryUser(f)
}

// QueryTag queries the tag edge of the Finding.
func (f *Finding) QueryTag() *TagQuery {
	return (&FindingClient{config: f.config}).QueryTag(f)
}

// QueryHost queries the host edge of the Finding.
func (f *Finding) QueryHost() *HostQuery {
	return (&FindingClient{config: f.config}).QueryHost(f)
}

// QueryScript queries the script edge of the Finding.
func (f *Finding) QueryScript() *ScriptQuery {
	return (&FindingClient{config: f.config}).QueryScript(f)
}

// Update returns a builder for updating this Finding.
// Note that, you need to call Finding.Unwrap() before calling this method, if this Finding
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Finding) Update() *FindingUpdateOne {
	return (&FindingClient{config: f.config}).UpdateOne(f)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (f *Finding) Unwrap() *Finding {
	tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Finding is not a transactional entity")
	}
	f.config.driver = tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Finding) String() string {
	var builder strings.Builder
	builder.WriteString("Finding(")
	builder.WriteString(fmt.Sprintf("id=%v", f.ID))
	builder.WriteString(", name=")
	builder.WriteString(f.Name)
	builder.WriteString(", description=")
	builder.WriteString(f.Description)
	builder.WriteString(", severity=")
	builder.WriteString(fmt.Sprintf("%v", f.Severity))
	builder.WriteString(", difficulty=")
	builder.WriteString(fmt.Sprintf("%v", f.Difficulty))
	builder.WriteByte(')')
	return builder.String()
}

// Findings is a parsable slice of Finding.
type Findings []*Finding

func (f Findings) config(cfg config) {
	for _i := range f {
		f[_i].config = cfg
	}
}
